---
import SunIcon from '@icons/Sun.astro';
import MoonIcon from '@icons/Moon.astro';
import SystemIcon from '@icons/System.astro';

const themes = [
	{ id: 'light', name: 'Claro', icon: SunIcon },
	{ id: 'dark', name: 'Oscuro', icon: MoonIcon },
	{ id: 'system', name: 'Sistema', icon: SystemIcon }
];
---

<div class='relative -mr-1'>
	<button
		id='theme-toggle-btn'
		class='appearance-none border-none flex hover:scale-110 transition-transform duration-200 p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800'
		aria-label='Cambiar tema'
	>
		<span class='sr-only'>Elige el tema</span>
		<SunIcon id='light' class='theme-toggle-icon size-5 transition-all text-amber-500' />
		<MoonIcon
			id='dark'
			class='theme-toggle-icon absolute size-5 transition-all text-indigo-500'
		/>
		<SystemIcon
			id='system'
			class='theme-toggle-icon absolute size-5 transition-all text-gray-600 dark:text-gray-400'
		/>
	</button>
	<div
		id='themes-menu'
		class='absolute hidden scale-95 top-10 right-0 text-sm p-2 min-w-[10rem] rounded-lg border border-gray-200 bg-white/95 dark:bg-gray-900/95 dark:border-gray-700/50 shadow-lg backdrop-blur-xl'
	>
		<ul>
			{
				themes.map(theme => {
					const Icon = theme.icon;
					return (
						<li class='themes-menu-option px-3 py-2 cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800 rounded-md transition-colors duration-150' data-theme={theme.id}>
							<span class='flex items-center gap-3'>
								<Icon class={`size-4 ${theme.id === 'light' ? 'text-amber-500' : theme.id === 'dark' ? 'text-indigo-500' : 'text-gray-600 dark:text-gray-400'}`} />
								<span class='font-medium text-gray-700 dark:text-gray-200'>{theme.name}</span>
							</span>
						</li>
					);
				})
			}
		</ul>
	</div>
</div>

<script>
	// Apply initial theme
	(function() {
		const theme = localStorage.getItem('theme') || 'system';
		const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
		const isDark = theme === 'dark' || (theme === 'system' && prefersDark);
		document.documentElement.classList.toggle('dark', isDark);
	})();
	
	document.addEventListener('DOMContentLoaded', () => {
		const themesMenu = document.getElementById('themes-menu');
		const themeToggleBtn = document.getElementById('theme-toggle-btn');
		const themeOptions = document.querySelectorAll('.themes-menu-option');
		
		if (!themesMenu || !themeToggleBtn) return;
		
		// Function to get current theme
		const getThemePreference = () => {
			if (typeof localStorage !== 'undefined') {
				return localStorage.getItem('theme') ?? 'system';
			}
			return window.matchMedia('(prefers-color-scheme: dark)').matches
				? 'dark'
				: 'light';
		};
		
		// Function to update icon visibility
		const updateIcon = (theme) => {
			document.querySelectorAll('.theme-toggle-icon').forEach(icon => {
				icon.style.scale = icon.id === theme ? '1' : '0';
			});
		};
		
		// Function to update active theme in menu
		const updateActiveTheme = (theme) => {
			themeOptions.forEach(option => {
				option.setAttribute('data-active', option.dataset.theme === theme);
			});
		};
		
		// Function to apply theme
		const updateTheme = () => {
			const theme = getThemePreference();
			const isDark = theme === 'dark' || 
				(theme === 'system' && window.matchMedia('(prefers-color-scheme: dark)').matches);
			
			document.documentElement.classList.toggle('dark', isDark);
			updateIcon(theme);
			updateActiveTheme(theme);
		};
		
		// Toggle menu when clicking button
		themeToggleBtn.addEventListener('click', (e) => {
			e.stopPropagation();
			e.preventDefault();
			themesMenu.classList.toggle('open');
		});
		
		// Close menu when clicking outside
		document.addEventListener('click', (e) => {
			if (!themesMenu.contains(e.target) && !themeToggleBtn.contains(e.target)) {
				themesMenu.classList.remove('open');
			}
		});
		
		// Handle theme selection
		themeOptions.forEach(option => {
			option.addEventListener('click', () => {
				const theme = option.dataset.theme;
				localStorage.setItem('theme', theme);
				updateTheme();
				themesMenu.classList.remove('open');
			});
		});
		
		// Listen to system theme changes
		window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', updateTheme);
		
		// Initialize theme
		updateTheme();
	});
</script>

<style>
	#themes-menu {
		transition: all 0.2s ease;
		transform-origin: top right;
	}
	
	#themes-menu:not(.open) {
		display: none;
	}
	
	#themes-menu.open {
		display: block !important;
		animation: scale-up-center 0.2s cubic-bezier(0.34, 1.56, 0.64, 1) both;
	}

	@keyframes scale-up-center {
		from {
			transform: scale(0.95) translateY(-5px);
			opacity: 0;
		}
		to {
			transform: scale(1) translateY(0);
			opacity: 1;
		}
	}
	
	.theme-toggle-icon {
		transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1);
	}
	
	#theme-toggle-btn {
		position: relative;
	}
	
	#theme-toggle-btn:active {
		transform: scale(0.95);
	}
	
	/* Hacer el menú más estilo Apple */
	#themes-menu {
		border-radius: 12px;
		box-shadow: 0 10px 25px rgba(0, 0, 0, 0.08), 
					0 4px 10px rgba(0, 0, 0, 0.05);
	}
	
	.themes-menu-option {
		transition: all 150ms ease;
	}
	
	.themes-menu-option:hover {
		transform: translateX(2px);
	}
	
	/* Indicador activo */
	.themes-menu-option[data-active="true"] {
		background-color: rgba(59, 130, 246, 0.1);
	}
	
	.themes-menu-option[data-active="true"] span {
		color: rgb(59, 130, 246);
	}
</style>
