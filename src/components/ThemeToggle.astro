---
import SunIcon from '@icons/Sun.astro';
import MoonIcon from '@icons/Moon.astro';
import SystemIcon from '@icons/System.astro';

const themes = [
	{ id: 'light', name: 'Light', icon: SunIcon },
	{ id: 'dark', name: 'Dark', icon: MoonIcon },
	{ id: 'system', name: 'System', icon: SystemIcon }
];
---

<div class='relative ml-1 mr-1'>
	<button
		id='theme-toggle-btn'
		class='appearance-none border-none flex hover:scale-125 transition'
		aria-label='Cambiar tema'
	>
		<span class='sr-only'>Elige el tema</span>
		<SunIcon id='light' class='theme-toggle-icon size-4 transition-all' />
		<MoonIcon
			id='dark'
			class='theme-toggle-icon absolute size-4 transition-all'
		/>
		<SystemIcon
			id='system'
			class='theme-toggle-icon absolute size-4 transition-all'
		/>
	</button>
	<div
		id='themes-menu'
		class='absolute hidden scale-80 top-8 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white/90 dark:bg-gray-900/90 dark:border-gray-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md'
	>
		<ul>
			{
				themes.map(theme => {
					const Icon = theme.icon;
					return (
						<li class='themes-menu-option px-2 py-1.5 cursor-pointer hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm' data-theme={theme.id}>
							<span class='flex items-center gap-2'>
								<Icon class='size-4' />
								{theme.name}
							</span>
						</li>
					);
				})
			}
		</ul>
	</div>
</div>

<script is:inline>
	document.addEventListener('DOMContentLoaded', () => {
		const themesMenu = document.getElementById('themes-menu');
		const themeToggleBtn = document.getElementById('theme-toggle-btn');
		const themeOptions = document.querySelectorAll('.themes-menu-option');
		
		if (!themesMenu || !themeToggleBtn) return;
		
		// Función para obtener el tema actual
		const getThemePreference = () => {
			if (typeof localStorage !== 'undefined') {
				return localStorage.getItem('theme') ?? 'system';
			}
			return window.matchMedia('(prefers-color-scheme: dark)').matches
				? 'dark'
				: 'light';
		};
		
		// Función para actualizar el icono visible
		const updateIcon = (theme) => {
			document.querySelectorAll('.theme-toggle-icon').forEach(icon => {
				icon.style.scale = icon.id === theme ? '1' : '0';
			});
		};
		
		// Función para actualizar el tema
		const updateTheme = () => {
			const theme = getThemePreference();
			const isDark = theme === 'dark' || 
				(theme === 'system' && window.matchMedia('(prefers-color-scheme: dark)').matches);
			
			document.documentElement.classList.toggle('dark', isDark);
			updateIcon(theme);
		};
		
		// Toggle menu when clicking button
		themeToggleBtn.addEventListener('click', (e) => {
			e.stopPropagation();
			e.preventDefault();
			themesMenu.classList.toggle('open');
		});
		
		// Close menu when clicking outside
		document.addEventListener('click', (e) => {
			if (!themesMenu.contains(e.target) && !themeToggleBtn.contains(e.target)) {
				themesMenu.classList.remove('open');
			}
		});
		
		// Handle theme selection
		themeOptions.forEach(option => {
			option.addEventListener('click', () => {
				const theme = option.dataset.theme;
				localStorage.setItem('theme', theme);
				updateTheme();
				themesMenu.classList.remove('open');
			});
		});
		
		// Escuchar cambios del sistema
		window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', updateTheme);
		
		// Inicializar tema
		updateTheme();
	});
</script>

<style>
	#themes-menu.open {
		display: block !important;
		animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
	}

	@keyframes scale-up-center {
		from {
			transform: scale(0.8);
			opacity: 0;
		}
		to {
			transform: scale(1);
			opacity: 1;
		}
	}
	
	.theme-toggle-icon {
		transition: scale 200ms ease-in-out;
	}
</style>
