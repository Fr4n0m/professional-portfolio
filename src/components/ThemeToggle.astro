---
import SunIcon from '@icons/Sun.astro';
import MoonIcon from '@icons/Moon.astro';
import SystemIcon from '@icons/System.astro';
// Determine the current language based on URL or default to 'es'
let lang = 'es';
if (Astro.url) {
  const pathSegments = Astro.url.pathname.split('/').filter(Boolean);
  if (pathSegments.length > 0 && pathSegments[0].length === 2) {
    lang = pathSegments[0];
  }
}
// Theme names in different languages
const themeNames: Record<string, Record<string, string>> = {
  es: { light: 'Claro', dark: 'Oscuro', system: 'Sistema' },
  en: { light: 'Light', dark: 'Dark', system: 'System' },
  fr: { light: 'Clair', dark: 'Sombre', system: 'Système' },
  de: { light: 'Hell', dark: 'Dunkel', system: 'System' },
  it: { light: 'Chiaro', dark: 'Scuro', system: 'Sistema' },
  pt: { light: 'Claro', dark: 'Escuro', system: 'Sistema' },
  nl: { light: 'Licht', dark: 'Donker', system: 'Systeem' },
  pl: { light: 'Jasny', dark: 'Ciemny', system: 'System' },
  ru: { light: 'Светлая', dark: 'Темная', system: 'Система' },
  ja: { light: 'ライト', dark: 'ダーク', system: 'システム' },
  ko: { light: '밝게', dark: '어둡게', system: '시스템' },
  zh: { light: '浅色', dark: '深色', system: '系统' },
  ar: { light: 'فاتح', dark: 'داكن', system: 'النظام' },
  hi: { light: 'हल्का', dark: 'गहरा', system: 'सिस्टम' },
  tr: { light: 'Açık', dark: 'Koyu', system: 'Sistem' },
  hv: { light: 'Uh', dark: 'Hh', system: 'Huh' },
  'en-us': { light: 'Light', dark: 'Dark', system: 'System' },
  'es-mx': { light: 'Claro', dark: 'Oscuro', system: 'Sistema' }
};
const currentThemeNames = themeNames[lang] || themeNames.es;
const themes = [
	{ id: 'light', name: currentThemeNames.light, icon: SunIcon },
	{ id: 'dark', name: currentThemeNames.dark, icon: MoonIcon },
	{ id: 'system', name: currentThemeNames.system, icon: SystemIcon }];
---
<div class='relative -mr-1' data-theme-lang={lang}>
<button
		id='theme-toggle-btn'
		class='appearance-none border-none flex hover:scale-110 transition-transform duration-200 p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800'
		aria-label='Cambiar tema'
	>
		<span class='sr-only'>Elige el tema</span>
		<SunIcon id='light' class='theme-toggle-icon size-5 transition-all text-amber-500' />
		<MoonIcon
			id='dark'
			class='theme-toggle-icon absolute size-5 transition-all text-indigo-500'
		/>
		<SystemIcon
			id='system'
			class='theme-toggle-icon absolute size-5 transition-all text-gray-600 dark:text-gray-400'
		/>
	</button>
	<div
		id='themes-menu'
		class='absolute top-10 right-0 text-sm p-2 min-w-[10rem] rounded-lg border border-gray-200 bg-white/95 dark:bg-gray-900/95 dark:border-gray-700/50 shadow-lg backdrop-blur-xl'>
		<ul class='space-y-1'>
			{
				themes.map(theme => {
					const Icon = theme.icon;
					return (
						<li class='themes-menu-option px-3 py-2 cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800 rounded-md transition-colors duration-150' data-theme={theme.id}>
							<span class='flex items-center gap-3'>
								<Icon class={`size-4 ${theme.id === 'light' ? 'text-amber-500' : theme.id === 'dark' ? 'text-indigo-500' : 'text-gray-600 dark:text-gray-400'}`} />
								<span class='font-medium text-gray-700 dark:text-gray-200'>{theme.name}</span>
							</span>
						</li>
					);
				})
			}
		</ul>
	</div>
</div>
<script is:inline>// Script inicial para aplicar el tema tan pronto como sea posible
	(function() {
		const getStoredTheme = () => localStorage.getItem('theme');
		const storedTheme = getStoredTheme();
		const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;if (storedTheme === 'dark' || (storedTheme === 'system' && systemPrefersDark) || (!storedTheme && systemPrefersDark)) {
			document.documentElement.classList.add('dark');
		} else {
			document.documentElement.classList.remove('dark');
		}
	})();
</script>
<script>
	// Initialize theme functionality
	(function initTheme() {
		// Apply theme immediately on page load
		const getStoredTheme = () => localStorage.getItem('theme') || 'system';
		const storedTheme = getStoredTheme();
		const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;const applyTheme = (theme) => {
			const isDark = theme === 'dark' || (theme === 'system' && prefersDark);
			document.documentElement.classList.toggle('dark', isDark);};
		applyTheme(storedTheme);
		
		// Setup interactive functionality after DOM loads
		function setupThemeToggle() {
			const toggle = document.getElementById('theme-toggle-btn');
			const menu = document.getElementById('themes-menu');
			
			if (!toggle || !menu) {
				console.warn('Theme toggle elements not found');
				return;
			}
			
			const updateIcons = (theme) => {
				document.querySelectorAll('.theme-toggle-icon').forEach(icon => {
					icon.style.scale = icon.id === theme ? '1' : '0';
				});
			};
			
			// Toggle menu
			toggle.addEventListener('click', (e) => {
				e.stopPropagation();
				menu.classList.toggle('open');
			});
			
			// Close menu on outside click
			document.addEventListener('click', () => {
				menu.classList.remove('open');
			});
			
			// Prevent menu from closing when clicking inside
			menu.addEventListener('click', (e) => {
				e.stopPropagation();
			});
			
			// Handle theme selection
			document.querySelectorAll('.themes-menu-option').forEach(option => {
				option.addEventListener('click', () => {
					const theme = option.dataset.theme;
					localStorage.setItem('theme', theme);
					applyTheme(theme);
					updateIcons(theme);
					menu.classList.remove('open');
					
					// Update active state
					document.querySelectorAll('.themes-menu-option').forEach(opt => {
						opt.setAttribute('data-active', opt.dataset.theme === theme);
					});
				});});
			
			// Initialize icons and active state
			const currentTheme = getStoredTheme();
			updateIcons(currentTheme);
			document.querySelectorAll('.themes-menu-option').forEach(opt => {
				opt.setAttribute('data-active', opt.dataset.theme === currentTheme);
			});
			
			// Listen to system theme changes
			window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
				if (getStoredTheme() === 'system') {
					applyTheme('system');
				}
			});
		}
		if (document.readyState === 'loading') {
			document.addEventListener('DOMContentLoaded', setupThemeToggle);
		} else {
			setupThemeToggle();
		}
	})();</script>
<style>
	#themes-menu {
		transform-origin: top right;
		transition: all 0.15s cubic-bezier(0.4, 0, 0.2, 1);
	}
	
	#themes-menu:not(.open) {
		pointer-events: none;
		opacity: 0;
		transform: scale(0.95) translateY(-5px);
	}
	
	#themes-menu.open {
		display: block !important;
		pointer-events: auto;
		opacity: 1;
		transform: scale(1) translateY(0);}
	@keyframes scale-up-center {
		from {
			transform: scale(0.95) translateY(-5px);
			opacity: 0;
		}
		to {
			transform: scale(1) translateY(0);
			opacity: 1;
		}
	}
	.theme-toggle-icon {
		transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1);
	}
	#theme-toggle-btn {
		position: relative;
	}
	#theme-toggle-btn:active {
		transform: scale(0.95);
	}
	/* Hacer el menú más estilo Apple */
	#themes-menu {
		border-radius: 12px;
		box-shadow: 0 10px 25px rgba(0, 0, 0, 0.08), 
					0 4px 10px rgba(0, 0, 0, 0.05);
	}
	.themes-menu-option {
		transition: all 150ms ease;
	}
	.themes-menu-option:hover {
		transform: translateX(2px);
	}
	/* Indicador activo */
	.themes-menu-option[data-active="true"] {
		background-color: rgba(59, 130, 246, 0.1);
	}
	.themes-menu-option[data-active="true"] span {
		color: rgb(59, 130, 246);
	}
</style>