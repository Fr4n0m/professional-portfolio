---
/**
 * Componente de Contacto
 * Este componente muestra la informaci√≥n de contacto y un formulario para enviar mensajes
 */

import LocationMapSection from '@components/LocationMapSection.astro';
import { commonClasses } from '@utils/cssClasses';
import SocialPill from '@components/ui/SocialPill.astro';
import ActionButton from '@components/ui/ActionButton.astro';

// Props
interface Props {
  lang: string;
  json: any;
}

const { lang = 'es', json } = Astro.props;

// Usar traducciones proporcionadas o fallback
const contactText = json?.contactPage || {
  title: lang === 'es' ? "Contacto" : "Contact",
  description: lang === 'es'
    ? "Estoy disponible para nuevos proyectos y oportunidades. No dudes en contactarme a trav√©s de cualquiera de estos canales."
    : "I'm available for new projects and opportunities. Feel free to reach out through any of these channels.",
  locationTitle: lang === 'es' ? "Mi Ubicaci√≥n" : "My Location",
  locationDescription: lang === 'es' 
    ? "Puedes encontrarme trabajando en esta oficina ubicada en M√°laga."
    : "You can find me working at this office located in Malaga.",
  formTitle: lang === 'es' ? "Env√≠ame un mensaje" : "Send me a message",
  nameLabel: lang === 'es' ? "Nombre" : "Name",
  emailLabel: lang === 'es' ? "Email" : "Email",
  messageLabel: lang === 'es' ? "Mensaje" : "Message",
  submitLabel: lang === 'es' ? "Enviar mensaje" : "Send message",
  namePlaceholder: lang === 'es' ? "Tu nombre" : "Your name",
  emailPlaceholder: lang === 'es' ? "tu@email.com" : "your@email.com",
  messagePlaceholder: lang === 'es' ? "Escribe tu mensaje aqu√≠..." : "Write your message here...",
  messageSent: lang === 'es' ? "¬°Mensaje enviado con √©xito! Te contactar√© pronto." : "Message sent successfully! I will contact you soon.",
  sending: lang === 'es' ? "Enviando..." : "Sending..."
};

// Obtener informaci√≥n personal
const personalInfo = json?.personalInfo || {
  name: "Francisco Rodr√≠guez",
  location: "üìç Calle Pirandello 16, M√°laga, Andaluc√≠a, Espa√±a",
  mail: "Fran11799@outlook.com",
  profiles: [
    { network: "GitHub", url: "https://github.com/Fr4n0m" },
    { network: "LinkedIn", url: "https://linkedin.com/in/francisco-rodriguez-martinez" }
  ]
};

// Datos de ubicaci√≥n extra√≠dos de la informaci√≥n personal
let city = "M√°laga";
let region = "Andaluc√≠a";
let address = "Calle Pirandello 16, Planta 3, Oficina 6, 29010";

// Extraer direcci√≥n de la ubicaci√≥n
if (personalInfo.location) {
  const locationParts = personalInfo.location.split('üìç')[1]?.trim().split(',');
  if (locationParts && locationParts.length >= 3) {
    address = locationParts[0].trim();
    city = locationParts[1].trim();
    region = locationParts[2].trim().split(' ')[0]; // Tomar solo 'Andaluc√≠a'/'Andalusia'
  }
}

// Redes sociales
const socialLinks = personalInfo.profiles ? personalInfo.profiles.map(profile => ({
  name: profile.network,
  url: profile.url,
  icon: profile.network.toLowerCase()
})) : [];

// A√±adir email como red social
socialLinks.push({
  name: "Email",
  url: `mailto:${personalInfo.mail || "Fran11799@outlook.com"}`,
  icon: "mail"
});
---

<main class="mt-24 mb-16">
  <section class="container mx-auto px-4 py-12">
    <h1 class={commonClasses.heading.h1 + " text-center mb-6"}>{contactText.title}</h1>
    
    <div class="max-w-4xl mx-auto">
      <!--
      <p class={commonClasses.textColors.secondary + " text-center mb-12"}>
        {contactText.description}
      </p>
      -->
      
      <!-- Redes sociales -->
      <div class="flex flex-wrap gap-3 justify-center mb-12 mt-4">
        {socialLinks.map(link => (
          <SocialPill href={link.url} icon={link.icon}>
            {link.name}
          </SocialPill>
        ))}
      </div>
      
      <!-- Formulario de contacto con dise√±o estilo Apple -->
      <div class="mb-16 max-w-xl mx-auto">
        <h2 class={commonClasses.heading.h2 + " text-center mb-8"}>{contactText.formTitle}</h2>
        
        <form id="contact-form" class="space-y-6 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm p-6 rounded-xl shadow-sm border border-gray-200/30 dark:border-gray-700/30">
          <div>
            <label for="name" class={commonClasses.textColors.secondary + " block mb-2 text-sm font-medium"}>
              {contactText.nameLabel}
            </label>
            <input 
              type="text" 
              id="name" 
              name="name"
              required
              placeholder={contactText.namePlaceholder}
              class="w-full px-4 py-3 bg-white/70 dark:bg-gray-700/70 border border-gray-200 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent transition-all duration-200 placeholder-gray-400 dark:placeholder-gray-500"
            />
          </div>
          
          <div>
            <label for="email" class={commonClasses.textColors.secondary + " block mb-2 text-sm font-medium"}>
              {contactText.emailLabel}
            </label>
            <input 
              type="email" 
              id="email" 
              name="email"
              required
              placeholder={contactText.emailPlaceholder}
              class="w-full px-4 py-3 bg-white/70 dark:bg-gray-700/70 border border-gray-200 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent transition-all duration-200 placeholder-gray-400 dark:placeholder-gray-500"
            />
          </div>
          
          <div>
            <label for="message" class={commonClasses.textColors.secondary + " block mb-2 text-sm font-medium"}>
              {contactText.messageLabel}
            </label>
            <textarea 
              id="message" 
              name="message"
              required
              rows="5"
              placeholder={contactText.messagePlaceholder}
              class="w-full px-4 py-3 bg-white/70 dark:bg-gray-700/70 border border-gray-200 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent transition-all duration-200 placeholder-gray-400 dark:placeholder-gray-500 resize-none"
            ></textarea>
          </div>
          
          <div class="text-center">
            <button 
              type="submit"
              class="px-6 py-3 bg-gradient-to-r from-blue-600 to-blue-700 dark:from-blue-500 dark:to-blue-600 text-white font-medium rounded-lg hover:from-blue-700 hover:to-blue-800 dark:hover:from-blue-600 dark:hover:to-blue-700 transition-all duration-200 shadow-md hover:shadow-lg active:scale-95 transform"
            >
              {contactText.submitLabel}
            </button>
          </div>
        </form>
      </div>
      
      <!-- Secci√≥n del mapa -->
      <LocationMapSection 
        city={city}
        region={region}
        address={address}
        title={contactText.locationTitle}
        description={contactText.locationDescription}
      />
    </div>
  </section>
</main>

<!-- Mensajes para JS (escondidos) -->
<div class="hidden">
  <span id="message-sent-text">{contactText.messageSent}</span>
  <span id="sending-text">{contactText.sending}</span>
</div>

<script is:inline>
  // L√≥gica para el formulario de contacto
  document.addEventListener('DOMContentLoaded', () => {
    const contactForm = document.getElementById('contact-form');
    
    if (contactForm) {
      contactForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        // Aqu√≠ normalmente har√≠as un fetch a tu API de env√≠o de formularios
        // Por ahora, solo simularemos un env√≠o exitoso
        
        const formData = new FormData(contactForm);
        const name = formData.get('name');
        const email = formData.get('email');
        const message = formData.get('message');
        
        // En un entorno real, enviar√≠as estos datos a tu backend
        console.log('Formulario enviado:', { name, email, message });
        
        // Simulaci√≥n de env√≠o exitoso
        const submitButton = contactForm.querySelector('button[type="submit"]');
        if (submitButton) {
          const originalText = submitButton.textContent;
          submitButton.disabled = true;
          
          // Cambiamos el texto del bot√≥n temporalmente
          const sendingText = document.getElementById('sending-text')?.textContent || (document.documentElement.lang === 'es' ? "Enviando..." : "Sending...");
          submitButton.innerHTML = `<svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg> ${sendingText}`;
          
          // Simulamos una respuesta del servidor despu√©s de 1.5 segundos
          setTimeout(() => {
            // Limpiamos el formulario
            contactForm.reset();
            
            // Mensaje de √©xito
            const successMessage = document.createElement('div');
            successMessage.className = 'mt-4 p-3 bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300 rounded-lg text-center';
            
            // Usar el mensaje de traducci√≥n si est√° disponible en la p√°gina
            const messageSentText = document.getElementById('message-sent-text')?.textContent || (document.documentElement.lang === 'es' 
              ? '¬°Mensaje enviado con √©xito! Te contactar√© pronto.'
              : 'Message sent successfully! I will contact you soon.');
            
            successMessage.textContent = messageSentText;
            contactForm.appendChild(successMessage);
            
            // Restauramos el bot√≥n
            submitButton.innerHTML = originalText;
            submitButton.disabled = false;
            
            // Quitamos el mensaje despu√©s de 5 segundos
            setTimeout(() => {
              successMessage.remove();
            }, 5000);
          }, 1500);
        }
      });
    }
  });
</script>
