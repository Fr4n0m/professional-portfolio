---
// CookieBanner.astro - Banner de consentimiento de cookies responsivo y accesible
import { getCurrentLanguage } from '@i18n/config';

// Obtener el idioma actual del sitio
const currentLang = getCurrentLanguage(Astro.url);

// Traducciones para los textos del banner
const translations = {
  es: {
    title: "Respetamos tu privacidad",
    description: "Utilizamos cookies para mejorar tu experiencia, mostrar contenido personalizado y analizar el tráfico del sitio web. Al hacer clic en 'Aceptar todas', consientes nuestro uso de cookies para estos fines.",
    essential: "Esenciales",
    essentialDescription: "Necesarias para el funcionamiento del sitio web. No pueden ser desactivadas.",
    analytical: "Analíticas",
    analyticalDescription: "Nos ayudan a entender cómo los visitantes interactúan con el sitio web.",
    functional: "Funcionales",
    functionalDescription: "Permiten funciones adicionales como compartir en redes sociales.",
    acceptAll: "Aceptar todas",
    acceptSelected: "Aceptar seleccionadas",
    rejectAll: "Rechazar todas",
    moreInfo: "Más información",
    preferences: "Preferencias",
    save: "Guardar preferencias",
    poweredBy: "Conformidad legal por Fr4n0m"
  },
  en: {
    title: "We respect your privacy",
    description: "We use cookies to enhance your experience, display personalized content, and analyze website traffic. By clicking 'Accept all', you consent to our use of cookies for these purposes.",
    essential: "Essential",
    essentialDescription: "Necessary for the website to function. Cannot be disabled.",
    analytical: "Analytical",
    analyticalDescription: "Help us understand how visitors interact with the website.",
    functional: "Functional",
    functionalDescription: "Enable additional functions such as social media sharing.",
    acceptAll: "Accept all",
    acceptSelected: "Accept selected",
    rejectAll: "Reject all",
    moreInfo: "More information",
    preferences: "Preferences",
    save: "Save preferences",
    poweredBy: "Legal compliance by Fr4n0m"
  },
  pt: {
    title: "Respeitamos sua privacidade",
    description: "Usamos cookies para melhorar sua experiência, exibir conteúdo personalizado e analisar o tráfego do site. Ao clicar em 'Aceitar todos', você consente com o uso de cookies para esses fins.",
    essential: "Essenciais",
    essentialDescription: "Necessários para o funcionamento do site. Não podem ser desativados.",
    analytical: "Analíticos",
    analyticalDescription: "Nos ajudam a entender como os visitantes interagem com o site.",
    functional: "Funcionais",
    functionalDescription: "Habilitam funções adicionais como compartilhamento em redes sociais.",
    acceptAll: "Aceitar todos",
    acceptSelected: "Aceitar selecionados",
    rejectAll: "Rejeitar todos",
    moreInfo: "Mais informações",
    preferences: "Preferências",
    save: "Salvar preferências",
    poweredBy: "Conformidade legal por Fr4n0m"
  }
};

// Seleccionar el conjunto de traducciones según el idioma actual
type SupportedLanguage = 'es' | 'en' | 'pt';
const typedLang = (currentLang as SupportedLanguage) || 'es';
const t = translations[typedLang] || translations.es;
---

<div id="cookie-consent-banner" class="fixed bottom-0 left-0 right-0 z-50 transition-transform duration-500 transform translate-y-full mb-0 bg-white/95 dark:bg-gray-900/95 backdrop-blur-xl shadow-lg border-t border-gray-200/20 dark:border-gray-700/20">
  <!-- Banner simple inicial -->
  <div id="cookie-banner-simple" class="p-4 md:p-6">
    <div class="max-w-6xl mx-auto">
      <div class="flex flex-col md:flex-row md:items-center justify-between gap-4">
        <div class="flex-1">
          <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">{t.title}</h2>
          <p class="text-gray-600 dark:text-gray-300 text-sm md:text-base max-w-3xl">{t.description}</p>
        </div>
        <div class="flex flex-col sm:flex-row gap-2 sm:gap-3">
          <button id="cookie-preferences-btn" class="px-4 py-2.5 rounded-xl bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300 transition-colors text-sm font-medium">
            {t.preferences}
          </button>
          <button id="cookie-reject-btn" class="px-4 py-2.5 rounded-xl bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300 transition-colors text-sm font-medium">
            {t.rejectAll}
          </button>
          <button id="cookie-accept-btn" class="px-4 py-2.5 rounded-xl bg-blue-600 hover:bg-blue-700 text-white transition-colors text-sm font-medium">
            {t.acceptAll}
          </button>
        </div>
      </div>
      <div class="mt-3 text-xs text-gray-500 dark:text-gray-400 flex justify-between items-center">
        <a href={`/${currentLang !== 'es' ? currentLang + '/' : ''}cookies-policy`} class="underline hover:text-blue-600 dark:hover:text-blue-400">
          {t.moreInfo}
        </a>
        <span>{t.poweredBy}</span>
      </div>
    </div>
  </div>
  
  <!-- Panel de preferencias detallado -->
  <div id="cookie-banner-detailed" class="hidden p-4 md:p-6">
    <div class="max-w-6xl mx-auto">
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-xl font-semibold text-gray-900 dark:text-white">{t.preferences}</h2>
        <button id="cookie-close-preferences" class="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      
      <div class="space-y-4 mb-6">
        <!-- Cookies esenciales -->
        <div class="p-4 rounded-xl bg-gray-100 dark:bg-gray-800 border border-gray-200/20 dark:border-gray-700/20">
          <div class="flex items-center justify-between">
            <div>
              <h3 class="font-semibold text-gray-900 dark:text-white">{t.essential}</h3>
              <p class="text-sm text-gray-600 dark:text-gray-400">{t.essentialDescription}</p>
            </div>
            <div class="switch-parent relative group">
              <input type="checkbox" class="checkbox" id="cookie-essential" checked disabled aria-label={t.essential} />
              <label class="switch switch-checked-disabled" for="cookie-essential">
                <span class="slider"></span>
              </label>
              <div class="absolute top-full right-0 mt-1 w-60 bg-white/90 dark:bg-gray-800/90 text-gray-800 dark:text-white text-xs p-2 rounded-xl shadow-lg border border-gray-200/50 dark:border-gray-700/50 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 pointer-events-none z-10 backdrop-blur-sm">
                Las cookies esenciales son necesarias para el funcionamiento básico del sitio y no pueden ser desactivadas.
                <div class="absolute -top-1 right-4 transform -rotate-45 w-2 h-2 bg-white dark:bg-gray-800 border-t border-l border-gray-200/50 dark:border-gray-700/50"></div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Cookies analíticas -->
        <div class="p-4 rounded-xl bg-gray-100 dark:bg-gray-800 border border-gray-200/20 dark:border-gray-700/20">
          <div class="flex items-center justify-between">
            <div>
              <h3 class="font-semibold text-gray-900 dark:text-white">{t.analytical}</h3>
              <p class="text-sm text-gray-600 dark:text-gray-400">{t.analyticalDescription}</p>
            </div>
            <div class="switch-parent">
              <input type="checkbox" class="checkbox" id="cookie-analytical" aria-label={t.analytical} />
              <label class="switch" for="cookie-analytical">
                <span class="slider"></span>
              </label>
            </div>
          </div>
        </div>
        
        <!-- Cookies funcionales -->
        <div class="p-4 rounded-xl bg-gray-100 dark:bg-gray-800 border border-gray-200/20 dark:border-gray-700/20">
          <div class="flex items-center justify-between">
            <div>
              <h3 class="font-semibold text-gray-900 dark:text-white">{t.functional}</h3>
              <p class="text-sm text-gray-600 dark:text-gray-400">{t.functionalDescription}</p>
            </div>
            <div class="switch-parent">
              <input type="checkbox" class="checkbox" id="cookie-functional" aria-label={t.functional} />
              <label class="switch" for="cookie-functional">
                <span class="slider"></span>
              </label>
            </div>
          </div>
        </div>
      </div>
      
      <div class="flex flex-col sm:flex-row gap-2 sm:gap-3 justify-end">
        <button id="cookie-save-preferences" class="px-6 py-2.5 rounded-xl bg-blue-600 hover:bg-blue-700 text-white transition-colors text-sm font-medium">
          {t.save}
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  // Sistema de gestión de cookies
  import { getCookie, setCookie, logConsentEvent } from '@utils/cookieUtils';
  import { applyAnalyticsConsent } from '@utils/analyticsUtils';
  import { gsap } from 'gsap';

interface CookieConsentConfig {
  consentName: string;
  consentVersion: string;
  cookieExpiry: number;
  cookieDomain: string;
  banner: HTMLElement | null;
  simpleView: HTMLElement | null;
  detailedView: HTMLElement | null;
  acceptBtn: HTMLElement | null;
  rejectBtn: HTMLElement | null;
  preferencesBtn: HTMLElement | null;
  savePreferencesBtn: HTMLElement | null;
  closePreferencesBtn: HTMLElement | null;
  categoryInputs: {
    essential: HTMLInputElement | null;
    analytical: HTMLInputElement | null;
    functional: HTMLInputElement | null;
  };
}

class CookieConsent {
  consentName: string;
  consentVersion: string;
  cookieExpiry: number;
  cookieDomain: string;
  banner: HTMLElement | null;
  simpleView: HTMLElement | null;
  detailedView: HTMLElement | null;
  acceptBtn: HTMLElement | null;
  rejectBtn: HTMLElement | null;
  preferencesBtn: HTMLElement | null;
  savePreferencesBtn: HTMLElement | null;
  closePreferencesBtn: HTMLElement | null;
  categoryInputs: {
    essential: HTMLInputElement | null;
    analytical: HTMLInputElement | null;
    functional: HTMLInputElement | null;
  };
    constructor() {
      this.consentName = 'cookie_consent';
      this.consentVersion = '1.0.2'; // Incrementado para la nueva versión con estilo Apple
      this.cookieExpiry = 365; // Días
      this.cookieDomain = window.location.hostname;
      
      this.banner = document.getElementById('cookie-consent-banner');
      this.simpleView = document.getElementById('cookie-banner-simple');
      this.detailedView = document.getElementById('cookie-banner-detailed');
      this.acceptBtn = document.getElementById('cookie-accept-btn');
      this.rejectBtn = document.getElementById('cookie-reject-btn');
      this.preferencesBtn = document.getElementById('cookie-preferences-btn');
      this.savePreferencesBtn = document.getElementById('cookie-save-preferences');
      this.closePreferencesBtn = document.getElementById('cookie-close-preferences');
      
      this.categoryInputs = {
        essential: document.getElementById('cookie-essential') as HTMLInputElement,
        analytical: document.getElementById('cookie-analytical') as HTMLInputElement,
        functional: document.getElementById('cookie-functional') as HTMLInputElement
      };
      
      this.init();
    }
    
    init() {
      // Comprueba si ya existe consentimiento
      const existingConsent = getCookie(this.consentName);
      
      if (!existingConsent || (existingConsent && JSON.parse(existingConsent).version !== this.consentVersion)) {
        // Mostrar el banner si no hay consentimiento o si la versión ha cambiado
        this.showBanner();
      } else {
        // Aplicar preferencias guardadas
        const consent = JSON.parse(existingConsent);
        this.applyConsent(consent);
      }
      
      // Enlazar eventos
      this.bindEvents();
    }
    
    bindEvents() {
      // Botones principales
      this.acceptBtn?.addEventListener('click', () => this.acceptAll());
      this.rejectBtn?.addEventListener('click', () => this.rejectAll());
      this.preferencesBtn?.addEventListener('click', () => this.showPreferences());
      this.closePreferencesBtn?.addEventListener('click', () => this.hidePreferences());
      this.savePreferencesBtn?.addEventListener('click', () => this.savePreferences());
      
      // Si hay inputs de categorías, establece sus valores iniciales
      const existingConsent = getCookie(this.consentName);
      if (existingConsent) {
        try {
          const consent = JSON.parse(existingConsent);
          if (consent && consent.categories) {
            Object.entries(this.categoryInputs).forEach(([category, input]) => {
              if (input && category !== 'essential' && consent.categories[category] !== undefined) { // Esenciales siempre activas
                input.checked = consent.categories[category];
              }
            });
          }
        } catch (e) {
          console.error('Error parsing consent cookie:', e);
        }
      }
    }
    
    showBanner() {
      // Mostrar el banner con animación
      setTimeout(() => {
        if (this.banner) {
          gsap.to(this.banner, {
            y: 0, 
            duration: 0.5,
            ease: 'power3.out',
            onStart: () => {
              this.banner.classList.remove('translate-y-full');
            }
          });
        }
      }, 1000); // Retraso de 1 segundo para no interrumpir inmediatamente
    }
    
    hideBanner() {
      // Ocultar el banner con animación
      if (this.banner) {
        gsap.to(this.banner, {
          y: '100%',
          duration: 0.4,
          ease: 'power3.in',
          onComplete: () => {
            this.banner.classList.add('translate-y-full');
          }
        });
      }
    }
    
    showPreferences() {
      // Mostrar vista detallada con animación
      if (this.simpleView && this.detailedView) {
        gsap.to(this.simpleView, {
          opacity: 0,
          duration: 0.2,
          onComplete: () => {
            this.simpleView.classList.add('hidden');
            this.detailedView.classList.remove('hidden');
            gsap.fromTo(this.detailedView, 
              { opacity: 0, y: 20 },
              { opacity: 1, y: 0, duration: 0.3, ease: 'power3.out' }
            );
          }
        });
      }
    }
    
    hidePreferences() {
      // Volver a vista simple con animación
      if (this.detailedView && this.simpleView) {
        gsap.to(this.detailedView, {
          opacity: 0,
          duration: 0.2,
          onComplete: () => {
            this.detailedView.classList.add('hidden');
            this.simpleView.classList.remove('hidden');
            gsap.fromTo(this.simpleView, 
              { opacity: 0 },
              { opacity: 1, duration: 0.3 }
            );
          }
        });
      }
    }
    
    acceptAll() {
      // Establecer consentimiento para todas las categorías
      const consent = {
        version: this.consentVersion,
        date: new Date().toISOString(),
        method: 'accept_all',
        categories: {
          essential: true,
          analytical: true,
          functional: true
        }
      };
      
      this.saveConsent(consent);
      this.applyConsent(consent);
      this.hideBanner();
      
      // Animación de éxito
      this.showSuccessNotification("Preferencias guardadas");
      
      // Registrar evento de consentimiento para análisis
      this.logConsentEvent('accept_all');
    }
    
    rejectAll() {
      // Establecer rechazo para todas las categorías excepto las esenciales
      const consent = {
        version: this.consentVersion,
        date: new Date().toISOString(),
        method: 'reject_all',
        categories: {
          essential: true, // Las esenciales siempre se aceptan
          analytical: false,
          functional: false
        }
      };
      
      this.saveConsent(consent);
      this.applyConsent(consent);
      this.hideBanner();
      
      // Animación de éxito
      this.showSuccessNotification("Preferencias guardadas");
      
      // Registrar evento de consentimiento para análisis
      this.logConsentEvent('reject_all');
    }
    
    savePreferences() {
      // Guardar preferencias seleccionadas manualmente
      const consent = {
        version: this.consentVersion,
        date: new Date().toISOString(),
        method: 'preferences',
        categories: {
          essential: true, // Las esenciales siempre se aceptan
          analytical: this.categoryInputs.analytical?.checked || false,
          functional: this.categoryInputs.functional?.checked || false
        }
      };
      
      this.saveConsent(consent);
      this.applyConsent(consent);
      this.hideBanner();
      
      // Animación de éxito
      this.showSuccessNotification("Preferencias guardadas");
      
      // Registrar evento de consentimiento para análisis
      this.logConsentEvent('custom_preferences');
    }
    
    saveConsent(consent: any): void {
      // Guardar el consentimiento en una cookie usando utilidades
      setCookie(this.consentName, JSON.stringify(consent), {
        days: this.cookieExpiry,
        domain: this.cookieDomain,
        secure: window.location.protocol === 'https:',
        sameSite: 'Lax'
      });
      
      // Disparar un evento personalizado para notificar a los componentes basados en consentimiento
      const consentEvent = new CustomEvent('consentUpdated', {
        detail: { consent }
      });
      document.dispatchEvent(consentEvent);
    }
    
    applyConsent(consent: any): void {
      // Aplicar configuraciones basadas en el consentimiento
      if (!consent || !consent.categories) {
        return; // No aplicar si no hay datos de consentimiento válidos
      }
      
      // Analíticas (Google Analytics, etc.)
      if (consent.categories.analytical) {
        this.enableAnalytics();
      } else {
        this.disableAnalytics();
      }
      
      // Funcionales (widgets de redes sociales, etc.)
      if (consent.categories.functional) {
        this.enableFunctional();
      } else {
        this.disableFunctional();
      }
    }
    
    // Mostrar notificación de éxito en estilo macOS
    showSuccessNotification(message: string): void {
      const notification = document.createElement('div');
      notification.className = 'fixed z-50 bottom-4 right-4 bg-gray-800/90 dark:bg-gray-700/90 text-white rounded-lg p-3 shadow-xl backdrop-blur-sm border border-gray-700/10 dark:border-gray-600/10 transform transition-all duration-300 opacity-0 translate-y-4';
      
      // Agregar ícono de éxito
      notification.innerHTML = `
        <div class="flex items-center gap-2">
          <svg class="w-5 h-5 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
          </svg>
          <span>${message}</span>
        </div>
      `;
      
      document.body.appendChild(notification);
      
      // Animar entrada
      gsap.to(notification, {
        opacity: 1,
        y: 0,
        duration: 0.3,
        ease: 'back.out(1.7)',
        onComplete: () => {
          // Luego animar salida después de 3 segundos
          setTimeout(() => {
            gsap.to(notification, {
              opacity: 0,
              y: 10,
              duration: 0.3,
              ease: 'power3.in',
              onComplete: () => {
                notification.remove();
              }
            });
          }, 3000);
        }
      });
    }
    
    // Métodos para habilitar/deshabilitar servicios específicos
    
    enableAnalytics() {
      // Ahora utilizamos la utilidad centralizada
      if (typeof applyAnalyticsConsent === 'function') {
        applyAnalyticsConsent();
      }
      
      // Desbloquear elementos relacionados con analytics
      document.querySelectorAll('.analytical-content.requires-consent').forEach((element: Element) => {
        element.classList.remove('consent-blocked');
      });
    }
    
    disableAnalytics() {
      // Ahora utilizamos la utilidad centralizada
      if (typeof applyAnalyticsConsent === 'function') {
        applyAnalyticsConsent();
      }
      
      // Bloquear elementos relacionados con analytics
      document.querySelectorAll('.analytical-content').forEach((element: Element) => {
        element.classList.add('consent-blocked');
      });
    }
    
    enableFunctional() {
      // Ahora utilizamos la utilidad centralizada
      if (typeof applyAnalyticsConsent === 'function') {
        applyAnalyticsConsent();
      }
      
      // Habilitar widgets de redes sociales y otros elementos funcionales
      document.querySelectorAll('.social-widget.requires-consent, .functional-content.requires-consent').forEach((widget: Element) => {
        widget.classList.remove('consent-blocked');
        
        // Cargar iframes que estaban bloqueados
        const iframe = widget.querySelector('iframe[data-src]') as HTMLIFrameElement;
        if (iframe && iframe.dataset.src) {
          iframe.src = iframe.dataset.src;
        }
      });
    }
    
    disableFunctional() {
      // Ahora utilizamos la utilidad centralizada
      if (typeof applyAnalyticsConsent === 'function') {
        applyAnalyticsConsent();
      }
      
      // Deshabilitar widgets de redes sociales y otros elementos funcionales
      document.querySelectorAll('.social-widget, .functional-content').forEach((widget: Element) => {
        widget.classList.add('consent-blocked');
        
        // Descargar iframes
        const iframe = widget.querySelector('iframe[src]') as HTMLIFrameElement;
        if (iframe && iframe.src) {
          iframe.dataset.src = iframe.src;
          iframe.src = 'about:blank';
        }
      });
    }
    
    // Registro de consentimiento para análisis internos
    logConsentEvent(action: string): void {
      // Utilizar la función centralizada de registro de consentimiento
      if (typeof logConsentEvent === 'function') {
        logConsentEvent(action);
      }
    }
  }
  
  // Asegurar que el objeto CookieConsent esté disponible globalmente
  window.CookieConsent = CookieConsent;
  
  // Inicializar cuando el DOM esté cargado
  document.addEventListener('DOMContentLoaded', () => {
    new CookieConsent();
  });
  
  // Backup para entornos como Vercel donde DOMContentLoaded podría haber disparado ya
  if (document.readyState === 'complete' || document.readyState === 'interactive') {
    setTimeout(() => {
      if (!window.cookieConsentInitialized) {
        console.log('Iniciando CookieConsent desde backup...');
        window.cookieConsentInitialized = true;
        new CookieConsent();
      }
    }, 500);
  }
</script>

<style>
  /* Añadir estilos para elementos bloqueados por falta de consentimiento */
  .consent-blocked {
    position: relative;
    min-height: 100px;
    background-color: rgba(0, 0, 0, 0.05);
    border-radius: 0.75rem;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
  }
  
  .consent-blocked::before {
    content: "Contenido bloqueado - Se requiere consentimiento de cookies";
    position: absolute;
    text-align: center;
    padding: 1rem;
    font-size: 0.875rem;
    color: rgba(0, 0, 0, 0.7);
  }
  
  .dark .consent-blocked {
    background-color: rgba(255, 255, 255, 0.05);
  }
  
  .dark .consent-blocked::before {
    color: rgba(255, 255, 255, 0.7);
  }
  
  /* The switch - the box around the slider */
  .switch-parent {
    width: 38px;
    height: 22px;
    position: relative;
  }
  /* Hide default HTML checkbox */
  .checkbox {
    opacity: 0;
    width: 0;
    height: 0;
    position: absolute;
  }
  .switch {
    width: 100%;
    height: 100%;
    display: block;
    background-color: #e9e9eb;
    border-radius: 10px;
    cursor: pointer;
    transition: all 0.2s ease-out;
    box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.1), 0px 1px 1px rgba(0, 0, 0, 0.06);
  }
  
  /* Añadir efecto de hover para mejorar la usabilidad */
  .switch:hover {
    box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.15);
  }
  
  .switch:hover .slider {
    transform: scale(1.05);
  }
  /* Estilo para el switch en modo oscuro - estado no activo */
  html.dark .switch {
    background-color: #3d4454;
  }
  /* The slider */
  .slider {
    width: 18px;
    height: 18px;
    position: absolute;
    left: calc(50% - 18px / 2 - 8px);
    top: calc(50% - 18px / 2);
    border-radius: 14px;
    background: #ffffff;
    box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.1), 0px 1px 1px rgba(0, 0, 0, 0.06);
    transition: all 0.2s ease-out;
    cursor: pointer;
  }
  /* Estilo para el slider en modo oscuro */
  html.dark .slider {
    background: #e2e8f0;
  }
  .switch-parent:active .slider {
    width: 22px;
    border-radius: 14px;
  }
  .checkbox:checked + .switch:active .slider {
    width: 22px;
    left: calc(30% - 18px / 2 + 10px);
  }
  .checkbox:checked + .switch {
    background-color: #34c759;
  }
  /* Color específico para tema oscuro */
  html.dark .checkbox:checked + .switch {
    background-color: #facc15;
  }
  .checkbox:checked + .switch .slider {
    left: calc(50% - 18px / 2 + 8px);
    top: calc(50% - 18px / 2);
  }
  
  /* Interruptor deshabilitado */
  .checkbox:disabled + .switch {
    background-color: rgba(128, 128, 128, 0.2);
    cursor: not-allowed;
  }
  
  html.dark .checkbox:disabled + .switch {
    background-color: rgba(128, 128, 128, 0.3);
  }
  
  /* Interruptor marcado y deshabilitado - estilo especial para esenciales */
  .checkbox:checked:disabled + .switch-checked-disabled {
    background-color: #34c759;
    opacity: 0.7;
    cursor: help;
  }
  
  html.dark .checkbox:checked:disabled + .switch-checked-disabled {
    background-color: #facc15;
    opacity: 0.7;
  }
  
  /* Muestra un borde de ayuda al hacer hover y un cursor especial */
  .switch-checked-disabled {
    cursor: help;
  }
  
  .switch-checked-disabled:hover {
    box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.3);
  }
  
  html.dark .switch-checked-disabled:hover {
    box-shadow: 0 0 0 2px rgba(250, 204, 21, 0.3);
  }
  
  .consent-message {
    margin-top: 0.5rem;
    font-size: 0.75rem;
    color: #4B5563;
  }
  
  .dark .consent-message {
    color: #9CA3AF;
  }
  
  /* Efectos de hover para botones */
  button:active {
    transform: scale(0.97);
  }
</style>
