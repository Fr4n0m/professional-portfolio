---
/**
 * ThemeMenu.astro
 * Men√∫ desplegable con opciones de tema
 */
import ThemeOption from './ThemeOption.astro';
import type { Theme } from '@i18n/utils/themeTranslations';

export interface Props {
  themes: Theme[];
  class?: string;
}

const { themes, class: className = '' } = Astro.props;
const menuClasses = `absolute top-10 right-0 text-sm p-2 min-w-[10rem] rounded-lg border border-gray-200 bg-white/95 dark:bg-gray-900/95 dark:border-gray-700/50 shadow-lg backdrop-blur-xl ${className}`;
---

<div id="themes-menu" class={menuClasses}>
  <ul class="space-y-1">
    {themes.map((theme) => {
      const Icon = theme.icon;
      
      return (
        <ThemeOption id={theme.id} name={theme.name}>
          <Icon class={`size-4 ${
            theme.id === 'light' 
              ? 'text-amber-500' 
              : theme.id === 'dark' 
                ? 'text-indigo-500' 
                : 'text-gray-600 dark:text-gray-400'
          }`} />
        </ThemeOption>
      );
    })}
  </ul>
</div>

<style>
  #themes-menu {
    transform-origin: top right;
    transition: all 0.15s cubic-bezier(0.4, 0, 0.2, 1);
    border-radius: 12px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.08), 
                0 4px 10px rgba(0, 0, 0, 0.05);
  }
  
  #themes-menu:not(.open) {
    pointer-events: none;
    opacity: 0;
    transform: scale(0.95) translateY(-5px);
  }
  
  #themes-menu.open {
    display: block !important;
    pointer-events: auto;
    opacity: 1;
    transform: scale(1) translateY(0);
  }
  
  @keyframes scale-up-center {
    from {
      transform: scale(0.95) translateY(-5px);
      opacity: 0;
    }
    to {
      transform: scale(1) translateY(0);
      opacity: 1;
    }
  }
</style>
