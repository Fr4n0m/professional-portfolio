---
// SocialSkillTooltip.astro - Tooltip para mostrar información detallada sobre habilidades sociales
interface Props {
  title: string;
  description: string;
  strengthLevel?: number; // Nivel de fortaleza de 1 a 5
  relatedSkills?: string[];
  icon?: string; // Nombre del icono (opcional)
  position?: 'top' | 'right' | 'bottom' | 'left';
  darkMode?: boolean;
  lang?: string;  // Idioma actual
}

const { 
  title, 
  description,
  strengthLevel = 4,
  relatedSkills = [],
  icon = 'people',
  position = 'top',
  darkMode = false,
  lang = 'es'
} = Astro.props;

// Convertir nivel de fuerza en una representación visual
const strengthBars = Array(5).fill(0).map((_, i) => i < strengthLevel);

// Traducciones para las etiquetas del tooltip
const translations = {
  strengthLevel: {
    es: 'Nivel de fortaleza:',
    en: 'Strength level:',
    fr: 'Niveau de force:',
    de: 'Stärkegrad:',
    pt: 'Nível de força:',
    it: 'Livello di forza:',
    zh: '强度等级:',
    ja: '強度レベル:',
    ko: '수준:',
    ru: 'Уровень навыка:',
    ar: 'مستوى القوة:',
    nl: 'Sterkte niveau:',
    pl: 'Poziom umiejętności:',
    tr: 'Beceri seviyesi:',
  },
  relatedSkills: {
    es: 'Habilidades relacionadas:',
    en: 'Related skills:',
    fr: 'Compétences connexes:',
    de: 'Verwandte Fähigkeiten:',
    pt: 'Habilidades relacionadas:',
    it: 'Abilità correlate:',
    zh: '相关技能:',
    ja: '関連スキル:',
    ko: '관련 기술:',
    ru: 'Связанные навыки:',
    ar: 'المهارات ذات الصلة:',
    nl: 'Gerelateerde vaardigheden:',
    pl: 'Powiązane umiejętności:',
    tr: 'İlgili beceriler:',
  }
};

// Obtener la traducción para el idioma actual o usar el predeterminado (inglés si no hay traducción)
const getTranslation = (key: string) => {
  return translations[key]?.[lang] || translations[key]?.en || translations[key]?.es || key;
};
---

<div class={`social-skill-tooltip absolute invisible opacity-0 z-[9999] transition-all duration-300 ease-out transform pointer-events-none ${
  position === 'top' ? 'bottom-full mb-2 -translate-x-1/2 left-1/2' : 
  position === 'right' ? 'left-full ml-2 -translate-y-1/2 top-1/2' : 
  position === 'bottom' ? 'top-full mt-2 -translate-x-1/2 left-1/2' : 
  'right-full mr-2 -translate-y-1/2 top-1/2'
}`}
  dir={lang === 'ar' ? 'rtl' : 'ltr'}
  data-lang={lang}
>
  <div class="bg-white dark:bg-gray-800 rounded-lg shadow-2xl border border-gray-200 dark:border-gray-700 p-4 w-[280px] md:w-[320px] backdrop-filter backdrop-blur-sm shadow-[0_8px_30px_rgba(0,0,0,0.12)] relative">
    <div class="flex items-center border-b border-gray-200 dark:border-gray-700 pb-2 mb-3">
      <div class="w-8 h-8 rounded-full bg-blue-100 dark:bg-blue-900/40 flex items-center justify-center mr-3">
        <svg class="w-5 h-5 text-blue-600 dark:text-blue-400" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          {icon === 'people' && (
            <path d="M12,12.75C10.35,12.75 7,13.58 7,15.25V18h10v-2.75C17,13.58 13.65,12.75 12,12.75z M12,8c1.1,0 2,0.9 2,2s-0.9,2-2,2s-2-0.9-2-2S10.9,8 12,8z M16.5,6c1.93,0 3.5,1.57 3.5,3.5 0,1.6-1.07,2.95-2.54,3.36C17.79,11.4 18,9.97 18,9c0-2-1.47-3.65-3.37-3.95C15.08,4.77 15.76,4.5 16.5,4.5 M16.5,3c-1.74,0-3.23,0.9-4.12,2.32C11.5,5.11 10.88,5 10.5,5 7.46,5 5,7.46 5,10.5c0,1.25 0.5,2.38 1.29,3.19C4.34,14.35 3,15.9 3,17.5V21h8V18c0-1.82 0.95-3.41 2.39-4.29 0.71,0.19 1.33,0.29 2.11,0.29 0.34,0 0.67-0.03 0.98-0.1 0.04,0.03 0.09,0.06 0.13,0.09 1.57,0.91 2.64,2.54 2.78,4.41 0.06,0.68 0.58,1.2 1.22,1.3 0.13,0.02 0.25,0.03 0.39,0.03 1.66,0 3-1.34 3-3 0-1.13-0.47-2.14-1.66-2.73-0.24-0.12-0.49-0.22-0.76-0.29C21.15,12.89 21.5,11.74 21.5,10.5 21.5,6.36 18.14,3 13.99,3" fill="currentColor"/>
          )}
          {icon === 'communication' && (
            <path d="M20,2h-2v2h2v2.03c-1.18,0.11-2.29,0.43-3.31,0.93L4.97,3.34C4.37,3.12,3.7,3.41,3.48,4.01 C3.27,4.6,3.56,5.27,4.16,5.48l11.72,3.62c-2.46,1.33-4.41,3.44-5.53,6.02c-0.25,0.16-0.49,0.32-0.75,0.47L5.95,9.5 c-0.25-0.14-0.54-0.11-0.78,0.1c-0.34,0.29-0.39,0.82-0.08,1.14l3.7,4.14C4.83,17.24,2,19.19,2,19.19v0.8h13.22 c1.07,2.48,3.55,4.22,6.42,4.22C24.74,24.21,28,20.95,28,17c0-3.27-2.62-5.94-5.89-6H20V2z M21.64,19.21 c-1.09,0-1.96-0.87-1.96-1.96s0.87-1.96,1.96-1.96s1.96,0.87,1.96,1.96S22.73,19.21,21.64,19.21z" fill="currentColor"/>
          )}
          {icon === 'leadership' && (
            <path d="M12,2C6.48,2 2,6.48 2,12c0,5.52 4.48,10 10,10c5.52,0 10-4.48 10-10C22,6.48 17.52,2 12,2z M13,9h4c0.55,0 1,0.45 1,1v4c0,0.55-0.45,1-1,1h-4v2h1.5c0.28,0 0.5,0.22 0.5,0.5l0,0c0,0.28-0.22,0.5-0.5,0.5h-3c-0.28,0-0.5-0.22-0.5-0.5l0,0c0-0.28,0.22-0.5,0.5-0.5H10v-2H7c-0.55,0-1-0.45-1-1V9c0-0.55,0.45-1,1-1h3V6H8.5C8.22,6,8,5.78,8,5.5l0,0C8,5.22,8.22,5,8.5,5h3C11.78,5,12,5.22,12,5.5l0,0c0,0.28-0.22,0.5-0.5,0.5H13V9z" fill="currentColor"/>
          )}
          {icon === 'teamwork' && (
            <path d="M22,7h-7V2H9v5H2v15h20V7z M11,4h2v5h-2V4z M11,16H9v-2h2V16z M15,16h-2v-2h2V16z" fill="currentColor"/>
          )}
          {icon === 'problem' && (
            <path d="M19.78,2.2L24,6.42c-1.91,1.91-3.96,3.69-6.31,5.31c-0.08,0.09-0.17,0.18-0.26,0.26c1.62-2.35,3.4-4.4,5.31-6.31L19.78,2.2z M9.8,12.2l1.34,1.34c-1.7,0.1-3.8,0.78-5.43,2.42C3.8,17.87,3.27,20.97,3,22.5C4.66,22.28,7.6,21.7,9.46,19.9c1.65-1.63,2.32-3.73,2.42-5.43l1.34,1.34l2.09-2.11l-3.38-3.45L9.8,12.2z M12.54,8C12.54,8,12.54,8,12.54,8c0.06-0.63,0.71-1.28,1.71-1.71l0,0l-1.75-1.75l-3.29,3.29L13.08,11.7L14.91,9.9l-1.67-1.67C13.38,8.2,13.09,8.17,12.54,8z" fill="currentColor"/>
          )}
        </svg>
      </div>
      <h4 class="font-semibold text-lg text-gray-900 dark:text-white">{title}</h4>
    </div>
    
    <p class="text-sm mb-3 text-gray-700 dark:text-gray-300">{description}</p>
    
    <div class="mb-3">
      <p class="text-xs font-medium text-gray-500 dark:text-gray-400 mb-1">{getTranslation('strengthLevel')}</p>
      <div class="flex space-x-1">
        {strengthBars.map((filled) => (
          <div class={`w-8 h-2 rounded-sm ${filled ? 'bg-blue-500 dark:bg-blue-400' : 'bg-gray-200 dark:bg-gray-700'}`}></div>
        ))}
      </div>
    </div>
    
    {relatedSkills.length > 0 && (
      <div>
        <p class="text-xs font-medium text-gray-500 dark:text-gray-400 mb-1">{getTranslation('relatedSkills')}</p>
        <div class="flex flex-wrap gap-1">
          {relatedSkills.map((skill) => (
            <span class={`text-[10px] px-1.5 py-0.5 rounded-md ${darkMode ? 'bg-blue-900/40 text-blue-400' : 'bg-blue-50 text-blue-700'}`}>
              {skill}
            </span>
          ))}
        </div>
      </div>
    )}
    
    <!-- Flecha del tooltip según la posición -->
    <div 
      class={`absolute w-4 h-4 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 transform rotate-45 ${
        position === 'top' ? 'top-[-6px] left-1/2 -translate-x-1/2 border-t border-l' : 
        position === 'right' ? 'right-[-6px] top-1/2 -translate-y-1/2 border-r border-t' : 
        position === 'bottom' ? 'bottom-[-6px] left-1/2 -translate-x-1/2 border-b border-r' : 
        'left-[-6px] top-1/2 -translate-y-1/2 border-l border-b'
      }`}
    ></div>
  </div>
</div>

<style>
  /* Verificar posición en pantallas pequeñas */
  @media (max-width: 768px) {
    .social-skill-tooltip {
      /* Siempre colocar arriba en móvil */
      left: 50% !important;
      bottom: 100% !important;
      top: auto !important;
      transform: translateX(-50%) !important;
      margin: 0 0 0.5rem 0 !important;
    }
    
    .social-skill-tooltip .absolute.w-4.h-4 {
      top: auto !important;
      bottom: -6px !important;
      left: 50% !important;
      transform: translateX(-50%) rotate(45deg) !important;
      border-width: 0 1px 1px 0 !important;
    }
  }
  
  /* Estilos específicos para RTL (para árabe y otros idiomas RTL) */
  [dir="rtl"] .social-skill-tooltip {
    text-align: right;
  }
  
  [dir="rtl"] .social-skill-tooltip .flex {
    flex-direction: row-reverse;
  }
  
  [dir="rtl"] .social-skill-tooltip .mr-3 {
    margin-right: 0;
    margin-left: 0.75rem;
  }
  
  [dir="rtl"] .social-skill-tooltip .space-x-1 > * + * {
    margin-left: 0;
    margin-right: 0.25rem;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const skillContainers = document.querySelectorAll('.skill-tooltip-container');
    
    skillContainers.forEach(container => {
      // Mostrar/ocultar tooltip al hacer hover
      container.addEventListener('mouseenter', () => {
        const tooltip = container.querySelector('.social-skill-tooltip');
        if (tooltip) {
          tooltip.classList.remove('invisible', 'opacity-0');
          tooltip.classList.add('visible', 'opacity-100');
        }
      });
      
      container.addEventListener('mouseleave', () => {
        const tooltip = container.querySelector('.social-skill-tooltip');
        if (tooltip) {
          tooltip.classList.add('invisible', 'opacity-0');
          tooltip.classList.remove('visible', 'opacity-100');
        }
      });
      
      // Detectar posición mejor en función del espacio disponible
      function updateTooltipPosition() {
        const tooltip = container.querySelector('.social-skill-tooltip');
        if (!tooltip) return;
        
        const rect = container.getBoundingClientRect();
        const tooltipRect = tooltip.getBoundingClientRect();
        const windowWidth = window.innerWidth;
        const windowHeight = window.innerHeight;
        
        // Si estamos en móvil, no necesitamos calcular nada más
        if (windowWidth < 768) return;
        
        // Verificar si hay espacio suficiente en cada dirección
        const spaceTop = rect.top;
        const spaceRight = windowWidth - rect.right;
        const spaceBottom = windowHeight - rect.bottom;
        const spaceLeft = rect.left;
        
        // Obtener la posición actual
        const currentPosition = tooltip.getAttribute('data-position') || 'top';
        
        // Determinar la mejor posición según el espacio disponible
        let bestPosition = currentPosition;
        
        // Altura y anchura del tooltip +20px de margen
        const tooltipHeight = tooltipRect.height + 20;
        const tooltipWidth = tooltipRect.width + 20;
        
        if (currentPosition === 'top' && spaceTop < tooltipHeight && spaceBottom >= tooltipHeight) {
          bestPosition = 'bottom';
        } else if (currentPosition === 'right' && spaceRight < tooltipWidth && spaceLeft >= tooltipWidth) {
          bestPosition = 'left';
        } else if (currentPosition === 'bottom' && spaceBottom < tooltipHeight && spaceTop >= tooltipHeight) {
          bestPosition = 'top';
        } else if (currentPosition === 'left' && spaceLeft < tooltipWidth && spaceRight >= tooltipWidth) {
          bestPosition = 'right';
        }
        
        // Actualizar clases del tooltip según la mejor posición
        if (bestPosition !== currentPosition) {
          tooltip.setAttribute('data-position', bestPosition);
          
          // Eliminar todas las clases de posición
          tooltip.classList.remove(
            'bottom-full', 'mb-2', '-translate-x-1/2', 'left-1/2',
            'left-full', 'ml-2', '-translate-y-1/2', 'top-1/2',
            'top-full', 'mt-2',
            'right-full', 'mr-2'
          );
          
          // Añadir clases según la nueva posición
          if (bestPosition === 'top') {
            tooltip.classList.add('bottom-full', 'mb-2', '-translate-x-1/2', 'left-1/2');
          } else if (bestPosition === 'right') {
            tooltip.classList.add('left-full', 'ml-2', '-translate-y-1/2', 'top-1/2');
          } else if (bestPosition === 'bottom') {
            tooltip.classList.add('top-full', 'mt-2', '-translate-x-1/2', 'left-1/2');
          } else if (bestPosition === 'left') {
            tooltip.classList.add('right-full', 'mr-2', '-translate-y-1/2', 'top-1/2');
          }
          
          // Actualizar la flecha
          const arrow = tooltip.querySelector('div[class*="rotate-45"]');
          if (arrow) {
            // Eliminar todas las clases de posición
            arrow.className = arrow.className.replace(/top-\[.*?\]|left-\[.*?\]|right-\[.*?\]|bottom-\[.*?\]|border-[trbl]|translate-[xy]-.*?(\s|$)/g, '');
            
            // Clase base
            let arrowClass = 'absolute w-4 h-4 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 transform rotate-45 ';
            
            // Añadir clases según la posición
            if (bestPosition === 'top') {
              arrowClass += 'top-[-6px] left-1/2 -translate-x-1/2 border-t border-l';
            } else if (bestPosition === 'right') {
              arrowClass += 'right-[-6px] top-1/2 -translate-y-1/2 border-r border-t';
            } else if (bestPosition === 'bottom') {
              arrowClass += 'bottom-[-6px] left-1/2 -translate-x-1/2 border-b border-r';
            } else if (bestPosition === 'left') {
              arrowClass += 'left-[-6px] top-1/2 -translate-y-1/2 border-l border-b';
            }
            
            arrow.className = arrowClass;
          }
        }
      }
      
      // Actualizar posición al cargar y redimensionar
      updateTooltipPosition();
      window.addEventListener('resize', updateTooltipPosition);
    });
  });
</script>
