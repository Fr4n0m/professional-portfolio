---
interface Tag {
	name: string;
	link: string;
	class: string;
	icon: (_props: Record<string, any>) => any;
}

const props = Astro.props;
---

<a
	target='_blank'
	rel='noopener noreferrer'
	href={props.link}
	class={`skill-pill flex gap-x-2 rounded-full text-xs font-semibold items-center ${props.class} px-3 py-1 border mb-6 transition-all duration-300`}
>
	<props.icon class='size-3' />
	{props.name}
</a>

<style>
  /* Estilos base de las skill pills */
  .skill-pill {
    position: relative;
    overflow: hidden;
    z-index: 1;
    transition: all 0.25s cubic-bezier(0.2, 0, 0.1, 1);
  }
  
  /* Efecto de hover - iluminación */
  .skill-pill:hover {
    /* Iluminación y realce de color */
    filter: brightness(1.25);
    /* Escala más notable para dar sensación de elevación */
    transform: translateY(-2px) scale(1.08);
  }
  
  /* Efecto click */
  .skill-pill:active {
    transform: translateY(0) scale(0.98);
    filter: brightness(0.95);
    transition-duration: 0.1s;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const skillPills = document.querySelectorAll('.skill-pill');
    if (skillPills.length > 0 && !document.documentElement.classList.contains('reduce-motion')) {
      skillPills.forEach(pill => {
        // Obtener el color del borde para el efecto de iluminación
        const computedStyle = getComputedStyle(pill);
        const borderColor = computedStyle.borderColor;
        const bgColor = computedStyle.backgroundColor;
        
        // Crear color de brillo basado en el color del borde
        // Convertir rgba a valores para poder manipularlos
        const borderColorMatch = borderColor.match(/rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*([\d.]+))?\)/i);
        let glowColor;
        
        if (borderColorMatch) {
          const r = parseInt(borderColorMatch[1]);
          const g = parseInt(borderColorMatch[2]);
          const b = parseInt(borderColorMatch[3]);
          // Usar el color del borde para el efecto glow pero con mayor opacidad
          glowColor = `rgba(${r}, ${g}, ${b}, 0.5)`;
        } else {
          // Color de respaldo si no se puede analizar
          glowColor = 'rgba(255, 255, 255, 0.5)';
        }
        
        // Inicializar transiciones suaves
        pill.style.transition = 'all 0.25s cubic-bezier(0.2, 0, 0.1, 1)';
        
        // Efecto de resplandor personalizado
        pill.addEventListener('mouseenter', () => {
          // Efecto de resplandor interno y externo más pronunciado usando el color del borde
          pill.style.boxShadow = `inset 0 0 8px ${glowColor}, 0 0 12px ${glowColor}`;
          // Aumentar sutilmente el color de fondo
          pill.style.backgroundColor = bgColor.replace(/rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*([\d.]+))?\)/i, 
            function(match, r, g, b, a) {
              // Aumentar la opacidad ligeramente
              const newAlpha = a ? Math.min(parseFloat(a) + 0.1, 1) : 0.3;
              return `rgba(${r}, ${g}, ${b}, ${newAlpha})`;
            });
        });
        
        pill.addEventListener('mouseleave', () => {
          pill.style.boxShadow = 'none';
          pill.style.backgroundColor = bgColor;
        });
      });
    }
  });
</script>
