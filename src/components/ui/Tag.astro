---
import SkillTooltip from '@components/ui/tooltips/SkillTooltip.astro';
// Importamos la función para determinar la experiencia recomendada
import { getRecommendedExperience } from '@config/skillDescriptions';

interface Tag {
	name: string;
	link: string;
	class: string;
	icon: (_props: Record<string, any>) => any;
}

const props = Astro.props;
---

<div class="skill-tooltip-container relative inline-block">
	<a
		target='_blank'
		rel='noopener noreferrer'
		href={props.link}
		class={`skill-pill flex gap-x-2 rounded-full text-xs font-semibold items-center ${props.class} px-3 py-1 border mb-2 transition-all duration-300`}
	>
		<props.icon class='size-3' />
		{props.name}
	</a>
	
	<!-- Tooltip que aparece al hacer hover -->
	<div class="tooltip-wrapper absolute left-1/2 transform -translate-x-1/2 -translate-y-[120%] top-0 pointer-events-none">
		<SkillTooltip 
			name={props.name}
			link={props.link}
			className={props.class}
			position="top"
			icon={props.icon}
			experience={getRecommendedExperience(props.name)}
		/>
	</div>
</div>

<style>
  /* Estilos base de las skill pills */
  .skill-pill {
    position: relative;
    overflow: hidden;
    z-index: 1;
    /* Eliminamos las transiciones CSS para manejarlas completamente con JavaScript */
  }
  
  /* El efecto hover ahora se maneja con JavaScript */
  
  /* Efecto click */
  .skill-pill:active {
    transform: translateY(0) scale(0.98);
    filter: brightness(0.95);
    transition-duration: 0.1s;
  }
  
  /* Estilos para el tooltip wrapper */
  .tooltip-wrapper {
    position: absolute;
    width: max-content;
    z-index: 9999;
    /* Offset para posicionar el tooltip correctamente */
    top: 0;
    margin-top: -10px;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const skillContainers = document.querySelectorAll('.skill-tooltip-container');
    const skillPills = document.querySelectorAll('.skill-pill');

    // Guardamos los efectos de iluminación por pill para mantener consistencia
    const pillEffects = {};

    // Variable para controlar el tiempo de cierre
    let closeTimeouts = {};

    // Configuración de comportamiento del tooltip
    skillContainers.forEach((container, index) => {
      const pill = container.querySelector('.skill-pill');
      const tooltipWrapper = container.querySelector('.tooltip-wrapper');
      const tooltip = tooltipWrapper ? tooltipWrapper.querySelector('.skill-tooltip') : null;
      const containerId = `tooltip-${index}`;
      
      // Variable para saber si el pill está iluminado
      let isPillHighlighted = false;
      
      // Precalcular los efectos de iluminación para esta pill
      if (pill && !pillEffects[containerId]) {
        // Obtener el color del borde para el efecto de iluminación
        const computedStyle = getComputedStyle(pill);
        const borderColor = computedStyle.borderColor;

        // Extraer los componentes de color
        let glowColor;
        try {
          const colorMatch = borderColor.match(/rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*([\d.]+))?\)/i);
          if (colorMatch) {
            const r = parseInt(colorMatch[1]);
            const g = parseInt(colorMatch[2]);
            const b = parseInt(colorMatch[3]);
            glowColor = `rgba(${r}, ${g}, ${b}, 0.5)`;
          } else {
            glowColor = 'rgba(100, 100, 255, 0.5)';
          }
        } catch (e) {
          glowColor = 'rgba(100, 100, 255, 0.5)';
        }
        
        // Guardar los efectos para esta pill
        pillEffects[containerId] = {
          filter: 'brightness(1.25)',
          transform: 'translateY(-2px) scale(1.08)',
          boxShadow: `0 4px 8px ${glowColor}, 0 0 12px ${glowColor}`
        };
      }
      
      // Función para resaltar el pill
      const highlightPill = () => {
        if (pill && pillEffects[containerId]) {
          // Si ya está resaltado, no hacemos nada para evitar relanzar la transición
          if (isPillHighlighted) return;
          
          isPillHighlighted = true;
          
          // Añadir las clases de iluminación al pill
          pill.classList.add('highlighted');
          
          // Aplicamos todos los efectos en un solo step para evitar reflow o multiple renders
          const effects = pillEffects[containerId];
          requestAnimationFrame(() => {
            pill.style.cssText = `
              filter: ${effects.filter};
              transform: ${effects.transform};
              box-shadow: ${effects.boxShadow};
              transition: all 0.25s cubic-bezier(0.2, 0, 0.1, 1);
            `;
          });
        }
      };
      
      // Función para quitar el resaltado del pill
      const unhighlightPill = () => {
        if (pill && isPillHighlighted) {
          isPillHighlighted = false;
          // Quitar las clases de iluminación
          pill.classList.remove('highlighted');
          
          // Quitamos todos los efectos en un solo step para una transición suave
          requestAnimationFrame(() => {
            pill.style.cssText = `
              filter: none;
              transform: none;
              box-shadow: none;
              transition: all 0.25s cubic-bezier(0.2, 0, 0.1, 1);
            `;
          });
        }
      };
      
      // Función para mostrar tooltip con delay
      const showTooltip = () => {
        if (tooltip) {
          // Cancelar cualquier cierre programado
          if (closeTimeouts[containerId]) {
            clearTimeout(closeTimeouts[containerId]);
            delete closeTimeouts[containerId];
          }
          
          // Iluminar el pill inmediatamente
          highlightPill();
          
          // Añadimos un delay de 400ms antes de mostrar el tooltip
          setTimeout(() => {
            // Solo añadimos la clase visible si todavía estamos en hover
            if (container.matches(':hover') || tooltip.matches(':hover')) {
              tooltip.classList.add('visible');
              tooltipWrapper.style.pointerEvents = 'auto';
            }
          }, 400);
        }
      };
      
      // Función para esconder tooltip con delay
      const hideTooltip = () => {
        if (tooltip) {
          // Programar el cierre con delay de 300ms
          closeTimeouts[containerId] = setTimeout(() => {
            // Solo ocultamos el tooltip si no estamos en hover ni en el pill ni en el tooltip
            if (!container.matches(':hover') && !tooltip.matches(':hover')) {
              tooltip.classList.remove('visible');
              tooltipWrapper.style.pointerEvents = 'none';
              // Solo quitamos la iluminación del pill si no hay hover
              unhighlightPill();
            }
            delete closeTimeouts[containerId];
          }, 300); // Delay para permitir mover el mouse al tooltip
        }
      };
      
      // Eventos para el pill
      container.addEventListener('mouseenter', () => {
        highlightPill();
        showTooltip();
      });
      
      container.addEventListener('mouseleave', () => {
        // No quitamos la iluminación inmediatamente, dejamos que hideTooltip lo decida
        hideTooltip();
      });
      
      // Eventos para el tooltip
      if (tooltip) {
        tooltip.addEventListener('mouseenter', () => {
          // Cancelar cualquier cierre programado
          if (closeTimeouts[containerId]) {
            clearTimeout(closeTimeouts[containerId]);
            delete closeTimeouts[containerId];
          }
          // Mantener el pill iluminado mientras el cursor esté sobre el tooltip
          highlightPill();
          tooltip.classList.add('visible');
        });
        
        tooltip.addEventListener('mouseleave', () => {
          // Al salir del tooltip, intentar cerrar todo
          hideTooltip();
        });
      }
    });

    // Ya no necesitamos los efectos visuales adicionales ya que
    // ahora manejamos todo el efecto hover con JavaScript
  });
</script>
