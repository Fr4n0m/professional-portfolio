---
import type { Profile } from '../types/profile';
import type { Translations } from '../types/translations';
import { languages } from '@i18n/config';

type SocialIcon = Record<string, string | any>;
const SOCIAL_ICONS: SocialIcon = {
	GitHub: `<svg
  width="20"
  height="20"
  viewBox="0 0 24 24"
  xmlns="http://www.w3.org/2000/svg"
  style="margin-right: 9px; margin-left: 1px"
  ><path
    fill="currentColor"
    d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"
  ></path></svg
>`,
	LinkedIn: `<svg
  height="17"
  width="17"
  viewBox="0 0 24 24"
  xmlns="http://www.w3.org/2000/svg"
  style="margin-right: 11px; margin-left: 2px; margin-top: 2px"
  ><title>LinkedIn</title><path
    fill="currentColor"
    d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"
  ></path></svg>`,
	CV: `<svg height="23"
  width="23" viewBox="0 0 24 24" fill="none" style="margin-right: 7px" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M13 9L15 15L17 9M10 15C9.06812 15 8.60218 15 8.23463 14.8478C7.74458 14.6448 7.35523 14.2554 7.15224 13.7654C7 13.3978 7 12.9319 7 12C7 11.0681 7 10.6022 7.15224 10.2346C7.35523 9.74458 7.74458 9.35523 8.23463 9.15224C8.60218 9 9.06812 9 10 9M7.2 20H16.8C17.9201 20 18.4802 20 18.908 19.782C19.2843 19.5903 19.5903 19.2843 19.782 18.908C20 18.4802 20 17.9201 20 16.8V7.2C20 6.0799 20 5.51984 19.782 5.09202C19.5903 4.71569 19.2843 4.40973 18.908 4.21799C18.4802 4 17.9201 4 16.8 4H7.2C6.0799 4 5.51984 4 5.09202 4.21799C4.71569 4.40973 4.40973 4.71569 4.21799 5.09202C4 5.51984 4 6.07989 4 7.2V16.8C4 17.9201 4 18.4802 4.21799 18.908C4.40973 19.2843 4.71569 19.5903 5.09202 19.782C5.51984 20 6.07989 20 7.2 20Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>`,
};

const translations: Translations = Astro.props.translations;
const profiles: Profile[] = translations.personalInfo.profiles;
const kbManagerTranslations = translations.keyboardManager;

// Crear comandos de navegación
const navigationCommands = kbManagerTranslations.kmCommands.map(command => ({
	id: command.id,
	title: command.title,
	icon: command.icon,
	shortcut: command.hotkey.replace('⌘', '⌘').toLowerCase(),
	section: command.section,
	url: command.handler
}));

// Crear comandos sociales
const profilesInfo = profiles.filter(p => p.network).map(({ network, url }) => {
	const icon = SOCIAL_ICONS[network!];
	const firstLetter = network![0]?.toUpperCase() || 'N';
	return {
		id: network!.toLowerCase(),
		title: `${kbManagerTranslations.kmTitle} ${network}`,
		icon,
		shortcut: `⌘+${firstLetter}`,
		section: kbManagerTranslations.kmSocialSection,
		url
	};
});

// Detectar idioma actual
const currentLang = Astro.url.pathname.match(/^\/([a-z]{2})(?:\/|$)/)?.[1] || 'en';

// Función para cambiar URL de idioma
function getLanguageUrl(targetLang: string): string {
	const currentPath = Astro.url.pathname;
	
	if (currentLang === 'en') {
		if (targetLang !== 'en') {
			return `/${targetLang}${currentPath}`;
		}
		return currentPath;
	}
	
	if (targetLang === 'en') {
		return currentPath.replace(new RegExp(`^/${currentLang}`), '');
	} else {
		return currentPath.replace(new RegExp(`^/${currentLang}`), `/${targetLang}`);
	}
}

// Crear comandos de idioma
const languageCommands = Object.entries(languages).map(([code, langInfo]) => ({
	id: `lang-${code}`,
	title: `${langInfo.flag} ${langInfo.nativeName}`,
	icon: langInfo.flag,
	section: 'Configuración / Settings',
	url: getLanguageUrl(code)
}));

// Combinar todos los comandos
const allCommands = [...navigationCommands, ...profilesInfo, ...languageCommands];
---

<footer
	id='normal-footer'
	class='key-footer no-print active:scale-90 transition-all duration-300 ease-in-out'
>
	<kbd class='bg-gray-100 dark:bg-gray-800 rounded-md pt-1 pb-1 pl-2 pr-2 text-sm font-medium'>⌘</kbd>
	<p class='px-1 text-gray-700 dark:text-gray-300'>+</p>
	<kbd class='bg-gray-100 dark:bg-gray-800 rounded-md pt-1 pb-1 pl-2 pr-2 text-sm font-medium'>K</kbd>
</footer>

<div id='footer-button' class='no-print'>
	<svg
		xmlns='http://www.w3.org/2000/svg'
		class='icon icon-tabler icon-tabler-command'
		width='28'
		height='28'
		viewBox='0 0 24 24'
		stroke-width='1.5'
		stroke='currentColor'
		fill='none'
		stroke-linecap='round'
		stroke-linejoin='round'
	>
		<path stroke='none' d='M0 0h24v24H0z' fill='none'></path>
		<path d='M7 9a2 2 0 1 1 2 -2v10a2 2 0 1 1 -2 -2h10a2 2 0 1 1 -2 2v-10a2 2 0 1 1 2 2h-10'></path>
	</svg>
</div>

<!-- Modal del Command Palette -->
<div id='command-palette' class='command-palette'>
	<div class='command-backdrop'></div>
	<div class='command-modal'>
		<div class='command-search'>
			<input
				type='text'
				placeholder={kbManagerTranslations.kmPlaceHolder}
				class='command-input'
			/>
		</div>
		<div class='command-list'>
			{allCommands.map(command => (
				<div 
					data-section={command.section}
					class='command-section'
				>
					<div class='section-title'>{command.section}</div>
					<div 
						class='command-item'
						data-command-id={command.id}
						data-command-url={command.url}
						data-command-title={command.title.toLowerCase()}
					>
						<div class='command-icon' set:html={command.icon} />
						<span class='command-title'>{command.title}</span>
						{command.shortcut && (
							<kbd class='command-shortcut'>{command.shortcut}</kbd>
						)}
					</div>
				</div>
			))}
		</div>
	</div>
</div>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const modal = document.getElementById('command-palette');
		const backdrop = modal?.querySelector('.command-backdrop');
		const input = modal?.querySelector('.command-input') as HTMLInputElement;
		const footerButton = document.getElementById('footer-button');
		const footer = document.getElementById('normal-footer');

		let isOpen = false;
		let selectedIndex = 0;

		function openCommandPalette() {
			if (!modal || isOpen) return;
			
			isOpen = true;
			modal.classList.add('open');
			input?.focus();
			
			// Reset search and selection
			if (input) input.value = '';
			filterCommands('');
			selectItem(0);
		}

		function closeCommandPalette() {
			if (!modal || !isOpen) return;
			
			isOpen = false;
			modal.classList.remove('open');
			input?.blur();
		}

		function filterCommands(query: string) {
			const sections = modal?.querySelectorAll('.command-section');
			let hasVisibleItems = false;

			sections?.forEach(section => {
				const items = section.querySelectorAll('.command-item');
				let sectionHasVisibleItems = false;

				items.forEach(item => {
					const title = item.getAttribute('data-command-title') || '';
					const isVisible = title.includes(query.toLowerCase());
					
					if (isVisible) {
						item.classList.remove('hidden');
						hasVisibleItems = true;
						sectionHasVisibleItems = true;
					} else {
						item.classList.add('hidden');
					}
				});

				// Hide section if no visible items
				if (sectionHasVisibleItems) {
					section.classList.remove('hidden');
				} else {
					section.classList.add('hidden');
				}
			});

			// Update selected index
			selectItem(0);
		}

		function selectItem(index: number) {
			const visibleItems = modal?.querySelectorAll('.command-item:not(.hidden)');
			if (!visibleItems || visibleItems.length === 0) return;

			// Remove previous selection
			modal?.querySelectorAll('.command-item.selected').forEach(item => {
				item.classList.remove('selected');
			});

			// Add new selection
			selectedIndex = Math.max(0, Math.min(index, visibleItems.length - 1));
			visibleItems[selectedIndex]?.classList.add('selected');
			visibleItems[selectedIndex]?.scrollIntoView({ block: 'nearest' });
		}

		function executeCommand(item: Element) {
			const url = item.getAttribute('data-command-url');
			if (url) {
				if (url.startsWith('http')) {
					window.open(url, '_blank');
				} else {
					window.location.href = url;
				}
			}
			closeCommandPalette();
		}

		// Event listeners
		document.addEventListener('keydown', (e) => {
			// Open command palette with Cmd+K or Ctrl+K
			if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
				e.preventDefault();
				if (isOpen) {
					closeCommandPalette();
				} else {
					openCommandPalette();
				}
			}

			// Handle shortcuts for individual commands
			if ((e.metaKey || e.ctrlKey) && !isOpen) {
				const key = e.key.toLowerCase();
				
				// Navigation shortcuts
				if (key === 'h') {
					e.preventDefault();
					window.location.href = '/#';
				} else if (key === 'p') {
					e.preventDefault();
					window.location.href = '/projects';
				} else if (key === 's') {
					e.preventDefault();
					window.location.href = '/certifications';
				} else if (key === 'i') {
					e.preventDefault();
					openCommandPalette();
					// Focus on language section
					setTimeout(() => {
						if (input) input.value = 'idioma language';
						filterCommands('idioma language');
					}, 100);
				}
				
				// Social shortcuts
				const socialItems = document.querySelectorAll('[data-command-id]');
				socialItems.forEach(item => {
					const id = item.getAttribute('data-command-id');
					if (id && id.includes(key) && id.length < 10) { // Simple check for social items
						const url = item.getAttribute('data-command-url');
						if (url && url.startsWith('http')) {
							e.preventDefault();
							window.open(url, '_blank');
						}
					}
				});
			}

			// Navigation inside command palette
			if (isOpen) {
				if (e.key === 'Escape') {
					e.preventDefault();
					closeCommandPalette();
				} else if (e.key === 'ArrowDown') {
					e.preventDefault();
					const visibleItems = modal?.querySelectorAll('.command-item:not(.hidden)');
					if (visibleItems) {
						selectItem(selectedIndex + 1);
					}
				} else if (e.key === 'ArrowUp') {
					e.preventDefault();
					const visibleItems = modal?.querySelectorAll('.command-item:not(.hidden)');
					if (visibleItems) {
						selectItem(selectedIndex - 1);
					}
				} else if (e.key === 'Enter') {
					e.preventDefault();
					const visibleItems = modal?.querySelectorAll('.command-item:not(.hidden)');
					if (visibleItems && visibleItems[selectedIndex]) {
						executeCommand(visibleItems[selectedIndex]);
					}
				}
			}
		});

		// Search functionality
		input?.addEventListener('input', (e) => {
			const target = e.target as HTMLInputElement;
			filterCommands(target.value);
		});

		// Click handlers
		footerButton?.addEventListener('click', openCommandPalette);
		footer?.addEventListener('click', openCommandPalette);
		backdrop?.addEventListener('click', closeCommandPalette);

		// Click on command items
		modal?.addEventListener('click', (e) => {
			const item = (e.target as HTMLElement).closest('.command-item');
			if (item) {
				executeCommand(item);
			}
		});

		// Group sections
		const sectionGroups = new Map();
		modal?.querySelectorAll('.command-section').forEach(section => {
			const sectionName = section.getAttribute('data-section');
			if (!sectionGroups.has(sectionName)) {
				sectionGroups.set(sectionName, []);
			}
			sectionGroups.get(sectionName).push(section);
		});

		// Merge sections with same name
		sectionGroups.forEach((sections, name) => {
			if (sections.length > 1) {
				const firstSection = sections[0];
				const firstSectionItems = firstSection.querySelector('.command-item')?.parentElement;
				
				for (let i = 1; i < sections.length; i++) {
					const items = sections[i].querySelectorAll('.command-item');
					items.forEach(item => {
						firstSectionItems?.appendChild(item);
					});
					sections[i].remove();
				}
			}
		});
	});
</script>

<style>
	.command-palette {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		z-index: 9999;
		opacity: 0;
		pointer-events: none;
		transition: opacity 200ms ease;
	}

	.command-palette.open {
		opacity: 1;
		pointer-events: auto;
	}

	.command-backdrop {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background: rgba(0, 0, 0, 0.5);
		backdrop-filter: blur(4px);
	}

	.command-modal {
		position: absolute;
		top: 20%;
		left: 50%;
		transform: translateX(-50%);
		width: 90%;
		max-width: 600px;
		max-height: 60vh;
		background: white;
		border-radius: 12px;
		box-shadow: 0 20px 60px -8px rgba(0, 0, 0, 0.3);
		overflow: hidden;
		display: flex;
		flex-direction: column;
	}

	:global(.dark) .command-modal {
		background: #1a1a1a;
		box-shadow: 0 20px 60px -8px rgba(0, 0, 0, 0.5);
	}

	.command-search {
		padding: 16px;
		border-bottom: 1px solid #e5e7eb;
	}

	:global(.dark) .command-search {
		border-bottom: 1px solid #374151;
	}

	.command-input {
		width: 100%;
		padding: 8px 12px;
		font-size: 16px;
		border: none;
		outline: none;
		background: transparent;
		color: #111827;
	}

	:global(.dark) .command-input {
		color: #f3f4f6;
	}

	.command-list {
		flex: 1;
		overflow-y: auto;
		padding: 8px;
	}

	.command-section {
		margin-bottom: 8px;
	}

	.command-section.hidden {
		display: none;
	}

	.section-title {
		padding: 8px 12px;
		font-size: 12px;
		font-weight: 600;
		color: #6b7280;
		text-transform: uppercase;
		letter-spacing: 0.05em;
	}

	:global(.dark) .section-title {
		color: #9ca3af;
	}

	.command-item {
		display: flex;
		align-items: center;
		gap: 12px;
		padding: 8px 12px;
		margin: 2px 0;
		border-radius: 8px;
		cursor: pointer;
		transition: background-color 150ms ease;
	}

	.command-item.hidden {
		display: none;
	}

	.command-item:hover,
	.command-item.selected {
		background: #f3f4f6;
	}

	:global(.dark) .command-item:hover,
	:global(.dark) .command-item.selected {
		background: #374151;
	}

	.command-icon {
		width: 20px;
		height: 20px;
		flex-shrink: 0;
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.command-icon :global(svg) {
		width: 20px;
		height: 20px;
	}

	.command-title {
		flex: 1;
		color: #111827;
	}

	:global(.dark) .command-title {
		color: #f3f4f6;
	}

	.command-shortcut {
		font-size: 12px;
		padding: 2px 6px;
		background: #e5e7eb;
		border-radius: 4px;
		color: #6b7280;
	}

	:global(.dark) .command-shortcut {
		background: #374151;
		color: #9ca3af;
	}

	#footer-button {
		background: rgba(98, 98, 98, 0.65);
		backdrop-filter: blur(10px);
		position: fixed;
		border: 1px solid rgba(238, 238, 238, 0.2);
		right: 20px;
		bottom: 20px;
		width: 48px;
		height: 48px;
		border-radius: 50%;
		display: flex;
		align-items: center;
		justify-content: center;
		cursor: pointer;
		z-index: 1000;
		transition: all 0.3s ease;
		color: #ffffff;
		box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
	}
	
	#footer-button:hover {
		background: rgba(113, 113, 113, 0.7);
		transform: scale(1.05);
	}
	
	:global(.dark) #footer-button {
		background: rgba(98, 98, 98, 0.65);
		border: 1px solid rgba(238, 238, 238, 0.2);
		color: #ffffff;
	}
	
	:global(.light) #footer-button {
		background: rgba(255, 255, 255, 0.9);
		border: 1px solid rgba(0, 0, 0, 0.1);
		color: #777777;
	}
	
	:global(.light) #footer-button:hover {
		background: rgba(240, 240, 240, 0.95);
	}

	.key-footer {
		display: flex;
		justify-content: center;
		align-items: center;
		background: rgba(255, 255, 255, 0.9);
		border: 1px solid rgba(0, 0, 0, 0.1);
		position: fixed;
		bottom: 20px;
		right: 20px;
		padding: 8px 16px;
		border-radius: 12px;
		font-size: 0.875rem;
		cursor: pointer;
		user-select: none;
		transition: all 0.2s ease;
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
		backdrop-filter: blur(10px);
	}

	.key-footer:hover {
		transform: scale(1.05);
		box-shadow: 0 6px 16px rgba(0, 0, 0, 0.12);
	}
	
	kbd {
		background: rgba(0, 0, 0, 0.05);
		padding: 3px 8px;
		border-radius: 6px;
		font-family: 'SF Mono', monospace;
		font-size: 0.875rem;
		color: inherit;
	}
	
	:global(.dark) .key-footer {
		background: rgba(30, 30, 30, 0.9);
		border-color: rgba(255, 255, 255, 0.1);
	}
	
	:global(.dark) kbd {
		background: rgba(255, 255, 255, 0.1);
	}

	@media (min-width: 601px) {
		#footer-button {
			display: none;
		}
	}

	@media (max-width: 600px) {
		#normal-footer {
			display: none;
		}
	}
</style>
