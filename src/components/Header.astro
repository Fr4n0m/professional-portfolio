---
import ThemeToggle from './ThemeToggle.astro';
import type { HeaderItem } from '../types/headerItem';
import type { Translations } from '../types/translations';
import LanguageSelector from './LanguageSelector.astro';
import LanguageToggle from './LanguageToggle.astro';

const translations: Translations = Astro.props.translations;
const headerItems: HeaderItem[] = translations.headerItems;
---

<header
	class='fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2'
>
	<nav
		class='flex px-3 text-sm font-medium rounded-full flex-wrap m-3 ml-5 mr-5 p-1 xs:p-0 xs:px-1 lg:p-0 lg:px-2 md:p-0 md:px-2 xl:p-0 xl:px-2 text-gray-500/90 dark:text-white/90 items-center justify-center'
	>
		<a href='/#' class='flex justify-center items-center mr-1'>
			<img
				src='/assets/images/Fr4n0m Photo.webp'
				alt='Fr4n0m photo'
				class='rounded-full w-5 h-5'
			/>
		</a>

		{
			headerItems.map(item => (
				<a
					class='block px-2 py-2 transition text-nowrap dark:hover:text-yellow-300 hover:text-blue-800'
					aria-label={item.label}
					href={item.url}
					target={item.title === 'CV' ? '_blank' : '_self'}
				>
					{item.title}
				</a>
			))
		}

		<ThemeToggle />

		<LanguageToggle />
	</nav>
</header>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const sections = document.querySelectorAll('section[data-section]');

		const navItems = document.querySelectorAll('header nav a');

		if (sections.length === 0) {
			console.error('No se encontraron secciones con ID en el DOM');
			return;
		}

		const callback = (entries: any[]) => {
			entries.forEach(entry => {
				if (entry.isIntersecting) {
					navItems.forEach(item => {
						if (
							item.getAttribute('aria-label') === entry.target.id
						) {
							item.classList.add('dark:text-yellow-300');
							item.classList.add('text-blue-800');
						} else {
							item.classList.remove('dark:text-yellow-300');
							item.classList.remove('text-blue-800');
						}
					});
				}
			});
		};

		const observer = new IntersectionObserver(callback, {
			root: null,
			rootMargin: '0px',
			threshold: 0.9,
		});

		sections.forEach(section => observer.observe(section));

		document.addEventListener('visibilitychange', () => {
			if (document.visibilityState === 'hidden') {
				observer.disconnect();
			} else {
				sections.forEach(section => observer.observe(section));
			}
		});
	});
</script>

<style>
	nav {
		animation: nav-shadown 1s linear both;
		animation-timeline: scroll();
		animation-range: 0 1000px;
	}

	nav {
		@apply dark:bg-gray-800/90 bg-white/50;
	}

	@keyframes nav-shadown {
		0% {
			@apply dark:bg-gray-800/0 bg-white/0;
		}
		to {
			@apply shadow-lg ring-1 backdrop-blur ring-white/10;
		}
	}
</style>
