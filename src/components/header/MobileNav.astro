---
import ThemeToggle from '@components/ThemeToggle.astro';
import LanguageToggle from '@components/LanguageToggle.astro';
import type { HeaderItem } from '../../types/headerItem';

export interface Props {
  headerItems: HeaderItem[];
  lang: string;
}

const { headerItems, lang } = Astro.props;
---

<!-- Header Mobile - Original -->
<div class='md:hidden flex items-center justify-between w-full px-4 py-3'>
  <!-- Logo + Menu Button -->
  <div class='flex items-center space-x-2'>
    <button
      id='mobile-menu-button'
      class='p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors'
      aria-label='Toggle menu'
    >
      <svg id='menu-icon' class='w-6 h-6' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
        <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M4 6h16M4 12h16M4 18h16'></path>
      </svg>
      <svg id='close-icon' class='w-6 h-6 hidden' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
        <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M6 18L18 6M6 6l12 12'></path>
      </svg>
    </button>
    <a href={lang === 'es' ? '/' : `/${lang}/`} class='flex items-center'>
      <img
        src='/assets/images/Fr4n0m Photo.webp'
        alt='Fr4n0m photo'
        class='rounded-full w-8 h-8'
      />
    </a>
  </div>

  <!-- Toggles -->
  <div class='flex items-center -mr-1'>
    <ThemeToggle />
    <LanguageToggle />
  </div>
</div>

<!-- Mobile Menu -->
<div
  id='mobile-menu'
  class='hidden md:hidden fixed top-[60px] left-0 right-0 bg-white dark:bg-gray-800 shadow-lg overflow-y-auto max-h-[calc(100vh-60px)] z-50'
>
  <nav class='px-4 py-4'>
    {headerItems.map(item => (
      <a
        class='mobile-nav-link block px-3 py-3 mb-1 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors'
        data-section={item.label}
        href={item.url}
        target={item.title === 'CV' ? '_blank' : '_self'}
      >
        {item.title}
      </a>
    ))}
  </nav>
</div>

<script>
  // Mobile menu functionality with improved UX
  function initMobileMenu() {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const menuIcon = document.getElementById('menu-icon');
    const closeIcon = document.getElementById('close-icon');
    const body = document.body;
    
    if (!mobileMenuButton || !mobileMenu || !menuIcon || !closeIcon) return;
    
    let isOpen = false;
    
    const toggleMenu = (open?: boolean) => {
      isOpen = open !== undefined ? open : !isOpen;
      
      if (isOpen) {
        mobileMenu.classList.remove('hidden');
        menuIcon.classList.add('hidden');
        closeIcon.classList.remove('hidden');
        body.style.overflow = 'hidden'; // Prevent body scroll when menu is open
      } else {
        mobileMenu.classList.add('hidden');
        menuIcon.classList.remove('hidden');
        closeIcon.classList.add('hidden');
        body.style.overflow = ''; // Restore body scroll
      }
    };
    
    mobileMenuButton.addEventListener('click', () => toggleMenu());
    
    // Close menu when clicking outside
    document.addEventListener('click', (event) => {
      const target = event.target as Node;
      if (!mobileMenuButton.contains(target) && 
          !mobileMenu.contains(target) && 
          isOpen) {
        toggleMenu(false);
      }
    });
    
    // Handle navigation links with improved hash handling
    const menuLinks = mobileMenu.querySelectorAll('a');
    menuLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        const href = link.getAttribute('href');
        
        if (href && href.includes('#')) {
          e.preventDefault();
          
          // Extract the hash from the URL
          const hashIndex = href.indexOf('#');
          const targetId = href.substring(hashIndex + 1);
          
          // Find the target section
          const targetSection = document.getElementById(targetId);
          
          if (targetSection) {
            const header = document.querySelector('.md\\:hidden');
            const headerHeight = header ? header.offsetHeight : 60;
            const targetPosition = targetSection.offsetTop - headerHeight - 20;
            
            window.scrollTo({
              top: targetPosition,
              behavior: 'smooth'
            });
          }
        }
        
        // Always close the menu after clicking a link
        toggleMenu(false);
      });
    });
    
    // Close menu on escape key
    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape' && isOpen) {
        toggleMenu(false);
      }
    });
    
    // Handle window resize
    window.addEventListener('resize', () => {
      if (window.innerWidth >= 768 && isOpen) {
        toggleMenu(false);
      }
    });
  }

  // Mobile navigation highlighting
  function setupMobileNavHighlighting() {
    const sections = document.querySelectorAll('section[data-section]');
    const navLinks = document.querySelectorAll('.mobile-nav-link');
    
    if (!sections.length || !navLinks.length) return;
    
    const updateActiveLink = () => {
      const scrollPosition = window.scrollY;
      const windowHeight = window.innerHeight;
      const documentHeight = document.documentElement.scrollHeight;
      
      let activeSection = '';
      
      // Check if at bottom of page
      if (scrollPosition + windowHeight >= documentHeight - 10) {
        activeSection = sections[sections.length - 1].id;
      } else {
        // Get the mobile header height for offset calculation
        const header = document.querySelector('.md\\:hidden');
        const headerHeight = header ? header.offsetHeight : 60;
        const offset = headerHeight + 80; // Additional offset for better triggering
        
        sections.forEach(section => {
          const sectionElement = section as HTMLElement;
          const sectionTop = sectionElement.offsetTop - offset;
          const sectionHeight = sectionElement.offsetHeight;
          
          if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {
            activeSection = section.id;
          }
        });
        
        // If no section is active and we're near the top, activate the first section
        if (!activeSection && scrollPosition < 100) {
          activeSection = sections[0].id;
        }
      }
      
      navLinks.forEach(link => {
        const linkSection = link.getAttribute('data-section');
        
        if (linkSection === activeSection) {
          link.classList.add('bg-gray-100', 'dark:bg-gray-700', 'font-semibold');
        } else {
          link.classList.remove('bg-gray-100', 'dark:bg-gray-700', 'font-semibold');
        }
      });
    };
    
    // Throttle scroll events
    let isScrolling = false;
    let scrollTimeout: number;
    
    const handleScroll = () => {
      if (!isScrolling) {
        window.requestAnimationFrame(() => {
          updateActiveLink();
          isScrolling = false;
        });
        isScrolling = true;
      }
      
      // Clear and reset timeout for scroll end detection
      clearTimeout(scrollTimeout);
      scrollTimeout = window.setTimeout(() => {
        updateActiveLink();
      }, 100);
    };
    
    window.addEventListener('scroll', handleScroll, { passive: true });
    window.addEventListener('resize', updateActiveLink);
    
    // Initial check
    updateActiveLink();
  }

  // Initialize everything when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      initMobileMenu();
      setupMobileNavHighlighting();
    });
  } else {
    initMobileMenu();
    setupMobileNavHighlighting();
  }
</script>

<style>
  /* Mobile menu animation */
  #mobile-menu {
    transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out;
  }

  #mobile-menu.hidden {
    transform: translateY(-10px);
    opacity: 0;
  }
  
  /* Prevent body scroll when menu is open */
  :global(body.menu-open) {
    overflow: hidden;
  }
</style>
