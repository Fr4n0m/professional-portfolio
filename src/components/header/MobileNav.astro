---
import ThemeToggle from '@components/ThemeToggle.astro';
import LanguageToggle from '@components/LanguageToggle.astro';
import AccessibilityPanel from './mobile/AccessibilityPanel.astro';
import type { HeaderItem } from '../../types/headerItem';
import type { Translations } from '../../types/translations';

export interface Props {
  headerItems: HeaderItem[];
  lang: string;
  translations: Translations;
}

const { headerItems, lang, translations } = Astro.props;
---

<!-- Header Mobile - Nuevo diseño con Accessibility Panel -->
<div class='md:hidden'>
  <!-- Header móvil fijo con blur -->
  <header class='fixed top-0 left-0 right-0 bg-white/80 dark:bg-gray-900/80 backdrop-blur-lg z-50 border-b border-gray-200/20 dark:border-gray-700/20'>
    <div class='flex items-center justify-between px-4 py-3'>
      <!-- Logo y botón de menú -->
      <div class='flex items-center gap-3'>
        <button
          id='mobile-menu-button'
          class='p-2 -ml-2 rounded-xl hover:bg-gray-100 dark:hover:bg-gray-800 transition-all duration-200 ease-out active:scale-95'
          aria-label='Toggle menu'
          type='button'
        >
          <svg id='menu-icon' class='w-6 h-6 text-gray-700 dark:text-gray-300 transition-all duration-300' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
            <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M4 6h16M4 12h16M4 18h16'></path>
          </svg>
          <svg id='close-icon' class='w-6 h-6 text-gray-700 dark:text-gray-300 hidden transition-all duration-300' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
            <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M6 18L18 6M6 6l12 12'></path>
          </svg>
        </button>
        
        <a href={lang === 'es' ? '/' : `/${lang}/`} class='flex items-center group'>
          <img
            src='/assets/images/Fr4n0m Photo.webp'
            alt='Fr4n0m photo'
            class='w-9 h-9 rounded-full object-cover ring-2 ring-transparent group-hover:ring-gray-300 dark:group-hover:ring-gray-600 transition-all duration-300'
          />
          <span class='ml-2 font-semibold text-gray-900 dark:text-white'>Portfolio</span>
        </a>
      </div>

      <!-- Botón de Control Center -->
      <div class="flex items-center gap-2">
        <button id="accessibility-toggle" class="accessibility-toggle relative w-10 h-10 flex items-center justify-center rounded-full bg-gray-100 dark:bg-gray-800 transition-colors hover:bg-gray-200 dark:hover:bg-gray-700 active:scale-95">
          <!-- Icono de control center al estilo iOS / SF Symbols -->
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-gray-700 dark:text-gray-300 ios-icon">
            <rect x="3" y="4" width="18" height="6" rx="3"></rect>
            <circle cx="16" cy="7" r="2" fill="currentColor"></circle>
            <rect x="3" y="14" width="18" height="6" rx="3"></rect>
            <circle cx="8" cy="17" r="2" fill="currentColor"></circle>
          </svg>
        </button>
      </div>
    </div>
  </header>

  <!-- Panel de Accesibilidad al estilo macOS -->
  <AccessibilityPanel />

  <!-- Mobile Menu - Estilo moderno -->
  <div
    id='mobile-menu'
    class='fixed inset-x-0 top-[69px] bg-white dark:bg-gray-900 shadow-2xl overflow-hidden z-40 transition-all duration-500 ease-out transform -translate-y-full opacity-0'
    data-open='false'
  >
    <nav class='px-4 py-6 max-h-[calc(100vh-69px)] overflow-y-auto'>
      {headerItems.map((item, index) => (
        <a
          class='mobile-nav-link flex items-center gap-3 px-4 py-3 mb-2 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-800 rounded-xl transition-all duration-200 transform hover:translate-x-1'
          data-section={item.label}
          href={item.url}
          target={item.title === 'CV' ? '_blank' : '_self'}
          style={`animation-delay: ${index * 50}ms`}
        >
          <span class='text-lg font-medium'>{item.title}</span>
          {item.title === 'CV' && (
            <svg class='w-4 h-4 ml-auto opacity-50 text-gray-700 dark:text-gray-300' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
              <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14'></path>
            </svg>
          )}
        </a>
      ))}
      
      <!-- Link de configuración avanzada -->
      <a
        id="settings-link"
        class='mobile-nav-link flex items-center gap-3 px-4 py-3 mb-2 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-800 rounded-xl transition-all duration-200 transform hover:translate-x-1 mt-4 border-t border-gray-200 dark:border-gray-700 pt-4'
        href="/settings"
      >
        <svg class="w-5 h-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
        </svg>
        <span class='text-lg font-medium'>{translations.settings?.title || 'Configuración avanzada'}</span>
      </a>
    </nav>
  </div>
</div>

<!-- Spacer para que el contenido no quede bajo el header -->
<div class='md:hidden h-[69px]'></div>

<script>
  import { gsap } from 'gsap';
  
  // Mobile menu functionality
  function initMobileMenu() {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const menuIcon = document.getElementById('menu-icon');
    const closeIcon = document.getElementById('close-icon');
    const body = document.body;
    
    if (!mobileMenuButton || !mobileMenu || !menuIcon || !closeIcon) return;
    
    const toggleMenu = (open) => {
      const isOpen = open !== undefined ? open : mobileMenu.dataset.open !== 'true';
      
      mobileMenu.dataset.open = isOpen.toString();
      
      if (isOpen) {
        // Abrir menú
        mobileMenu.classList.remove('-translate-y-full', 'opacity-0');
        mobileMenu.classList.add('translate-y-0', 'opacity-100');
        menuIcon.classList.add('rotate-90', 'opacity-0', 'pointer-events-none');
        closeIcon.classList.remove('hidden', '-rotate-90');
        closeIcon.classList.add('rotate-0');
        body.style.overflow = 'hidden';
        
        // Animar items del menú
        const items = mobileMenu.querySelectorAll('.mobile-nav-link');
        items.forEach((item, index) => {
          setTimeout(() => {
            item.classList.add('animate-slide-in');
          }, index * 50);
        });
      } else {
        // Cerrar menú
        mobileMenu.classList.add('-translate-y-full', 'opacity-0');
        mobileMenu.classList.remove('translate-y-0', 'opacity-100');
        menuIcon.classList.remove('rotate-90', 'opacity-0', 'pointer-events-none');
        closeIcon.classList.add('-rotate-90');
        setTimeout(() => {
          closeIcon.classList.add('hidden');
          closeIcon.classList.remove('rotate-0');
        }, 300);
        body.style.overflow = '';
        
        // Reset animaciones
        const items = mobileMenu.querySelectorAll('.mobile-nav-link');
        items.forEach(item => {
          item.classList.remove('animate-slide-in');
        });
      }
    };
    
    mobileMenuButton.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      toggleMenu();
    });
    
    // Cerrar menú al hacer clic fuera
    document.addEventListener('click', (event) => {
      const target = event.target;
      if (!mobileMenuButton.contains(target) && 
          !mobileMenu.contains(target) && 
          mobileMenu.dataset.open === 'true') {
        toggleMenu(false);
      }
    });
    
    // Manejar links del menú
    const menuLinks = mobileMenu.querySelectorAll('a');
    menuLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        const href = link.getAttribute('href');
        
        if (href && href.includes('#')) {
          e.preventDefault();
          
          const hashIndex = href.indexOf('#');
          const targetId = href.substring(hashIndex + 1);
          const targetSection = document.getElementById(targetId);
          
          if (targetSection) {
            const headerHeight = 69;
            const targetPosition = targetSection.offsetTop - headerHeight - 20;
            
            window.scrollTo({
              top: targetPosition,
              behavior: 'smooth'
            });
          }
        }
        
        toggleMenu(false);
      });
    });
    
    // Cerrar menú con Escape
    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape' && mobileMenu.dataset.open === 'true') {
        toggleMenu(false);
      }
    });
    
    // Manejar resize
    window.addEventListener('resize', () => {
      if (window.innerWidth >= 768 && mobileMenu.dataset.open === 'true') {
        toggleMenu(false);
      }
    });
  }

  // Mobile navigation highlighting
  function setupMobileNavHighlighting() {
    const sections = document.querySelectorAll('section[data-section]');
    const navLinks = document.querySelectorAll('.mobile-nav-link');
    
    if (!sections.length || !navLinks.length) return;
    
    const updateActiveLink = () => {
      const scrollPosition = window.scrollY;
      const windowHeight = window.innerHeight;
      const documentHeight = document.documentElement.scrollHeight;
      const headerHeight = 69;
      const offset = headerHeight + 40;
      
      let activeSection = '';
      
      if (scrollPosition + windowHeight >= documentHeight - 10) {
        activeSection = sections[sections.length - 1].id;
      } else {
        sections.forEach(section => {
          const sectionElement = section;
          const sectionTop = sectionElement.offsetTop - offset;
          const sectionHeight = sectionElement.offsetHeight;
          
          if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {
            activeSection = section.id;
          }
        });
        
        if (!activeSection && scrollPosition < 100) {
          activeSection = sections[0].id;
        }
      }
      
      navLinks.forEach(link => {
        const linkSection = link.getAttribute('data-section');
        
        if (linkSection === activeSection) {
          link.classList.add('bg-blue-50', 'dark:bg-blue-900/20', 'text-blue-600', 'dark:text-yellow-300', 'font-semibold');
          link.classList.remove('text-gray-700', 'dark:text-gray-300');
        } else {
          link.classList.remove('bg-blue-50', 'dark:bg-blue-900/20', 'text-blue-600', 'dark:text-yellow-300', 'font-semibold');
          link.classList.add('text-gray-700', 'dark:text-gray-300');
        }
      });
    };
    
    let isScrolling = false;
    let scrollTimeout;
    
    const handleScroll = () => {
      if (!isScrolling) {
        window.requestAnimationFrame(() => {
          updateActiveLink();
          isScrolling = false;
        });
        isScrolling = true;
      }
      
      clearTimeout(scrollTimeout);
      scrollTimeout = window.setTimeout(() => {
        updateActiveLink();
      }, 100);
    };
    
    window.addEventListener('scroll', handleScroll, { passive: true });
    window.addEventListener('resize', updateActiveLink);
    
    updateActiveLink();
  }

  // Header toggles function
  function setupHeaderToggles() {
    
    // Accessibility panel toggle
    const accessibilityToggle = document.getElementById('accessibility-toggle');
    const accessibilityPanel = document.getElementById('accessibility-panel');
    
    if (accessibilityToggle && accessibilityPanel) {
      let accessibilityPanelOpen = false;
      
      accessibilityToggle.addEventListener('click', (e) => {
        e.stopPropagation();
        
        if (accessibilityPanelOpen) {
          gsap.to(accessibilityPanel, {
            opacity: 0,
            scale: 0.95,
            duration: 0.2,
            onComplete: () => {
              accessibilityPanel.classList.add('pointer-events-none');
            }
          });
        } else {
          accessibilityPanel.classList.remove('pointer-events-none');
          gsap.to(accessibilityPanel, {
            opacity: 1,
            scale: 1,
            duration: 0.3,
            ease: 'back.out(1.7)'
          });
        }
        
        accessibilityPanelOpen = !accessibilityPanelOpen;
      });
      
      // Inicializar controles de accesibilidad
      initAccessibilityControls();
    }
    
    // Cerrar dropdowns al hacer clic fuera
    document.addEventListener('click', (e) => {      
      if (accessibilityPanel && !accessibilityToggle.contains(e.target) && !accessibilityPanel.contains(e.target)) {
        gsap.to(accessibilityPanel, {
          opacity: 0,
          scale: 0.95,
          duration: 0.2,
          onComplete: () => {
            accessibilityPanel.classList.add('pointer-events-none');
          }
        });
        accessibilityPanelOpen = false;
      }
    });
  }

  // Función para inicializar controles de accesibilidad
  function initAccessibilityControls() {
    // Elementos del panel
    const themeModeToggle = document.querySelector('.theme-mode-toggle');
    const contrastToggle = document.querySelector('.contrast-toggle');
    const fontSizeValue = document.querySelector('.font-size-value');
    const fontSizeDecrease = document.querySelector('.font-size-decrease');
    const fontSizeIncrease = document.querySelector('.font-size-increase');
    const fontSizeSlider = document.querySelector('.font-size-slider');
    const motionToggle = document.querySelector('.motion-toggle');
    const motionToggleHandle = document.querySelector('.motion-toggle-handle');
    const spacingToggle = document.querySelector('.spacing-toggle');
    const spacingToggleHandle = document.querySelector('.spacing-toggle-handle');
    const themeModeIndicator = document.querySelector('.theme-mode-indicator');
    const contrastIndicator = document.querySelector('.contrast-indicator');
    
    // Inicializar estados guardados
    const theme = localStorage.getItem('theme') || 'system';
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    const isDark = theme === 'dark' || (theme === 'system' && prefersDark);
    const highContrast = localStorage.getItem('high-contrast') === 'true';
    // Asegurar que el tamaño de fuente sea en incrementos de 5 comenzando desde 100
    let fontSize = parseInt(localStorage.getItem('fontSize') || '100');
    // Redondear al incremento de 5 más cercano y asegurar que esté entre 85 y 120
    fontSize = Math.max(85, Math.min(120, Math.round(fontSize/5)*5));
    localStorage.setItem('fontSize', fontSize.toString());
    const reduceMotion = localStorage.getItem('enable-animations') === 'false';
    const increasedSpacing = localStorage.getItem('increased-spacing') === 'true';
    
    // Aplicar estados iniciales
    document.documentElement.classList.toggle('dark', isDark);
    document.documentElement.classList.toggle('high-contrast', highContrast);
    document.documentElement.classList.toggle('reduce-motion', reduceMotion);
    document.documentElement.classList.toggle('increased-spacing', increasedSpacing);
    document.documentElement.style.fontSize = `${fontSize}%`;
    
    // Actualizar UI basado en estados guardados
    if (themeModeToggle && themeModeIndicator) {
      themeModeIndicator.style.width = isDark ? '100%' : '0%';
    }
    
    if (contrastToggle && contrastIndicator) {
      contrastIndicator.style.width = highContrast ? '100%' : '0%';
    }
    
    if (fontSizeValue && fontSizeSlider) {
      fontSizeValue.textContent = `${fontSize}%`;
      const sliderWidth = ((fontSize - 85) / (120 - 85)) * 100;
      fontSizeSlider.style.width = `${sliderWidth}%`;
    }
    
    if (motionToggle && motionToggleHandle) {
      motionToggle.setAttribute('aria-checked', (!reduceMotion).toString());
      motionToggle.classList.toggle('bg-blue-500', !reduceMotion);
      motionToggle.classList.toggle('dark:bg-blue-600', !reduceMotion);
      motionToggle.classList.toggle('bg-gray-200', reduceMotion);
      motionToggle.classList.toggle('dark:bg-gray-700', reduceMotion);
      
      if (!reduceMotion) {
        motionToggleHandle.classList.add('translate-x-5');
        motionToggleHandle.classList.remove('translate-x-1');
      }
    }
    
    if (spacingToggle && spacingToggleHandle) {
      spacingToggle.setAttribute('aria-checked', increasedSpacing.toString());
      spacingToggle.classList.toggle('bg-blue-500', increasedSpacing);
      spacingToggle.classList.toggle('dark:bg-blue-600', increasedSpacing);
      spacingToggle.classList.toggle('bg-gray-200', !increasedSpacing);
      spacingToggle.classList.toggle('dark:bg-gray-700', !increasedSpacing);
      
      if (increasedSpacing) {
        spacingToggleHandle.classList.add('translate-x-5');
        spacingToggleHandle.classList.remove('translate-x-1');
      }
    }
    
    // Event listeners
    if (themeModeToggle) {
      themeModeToggle.addEventListener('click', () => {
        const currentTheme = localStorage.getItem('theme') || 'system';
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        const isDark = currentTheme === 'dark' || (currentTheme === 'system' && prefersDark);
        
        // Cambiar al siguiente tema
        const nextTheme = isDark ? 'light' : 'dark';
        localStorage.setItem('theme', nextTheme);
        
        // Actualizar clases
        document.documentElement.classList.toggle('dark', !isDark);
        
        // Animar indicador
        gsap.to(themeModeIndicator, {
          width: isDark ? '0%' : '100%',
          duration: 0.3,
          ease: 'power2.out'
        });
      });
    }
    
    if (contrastToggle) {
      contrastToggle.addEventListener('click', () => {
        const currentContrast = localStorage.getItem('high-contrast') === 'true';
        localStorage.setItem('high-contrast', (!currentContrast).toString());
        document.documentElement.classList.toggle('high-contrast', !currentContrast);
        
        // Animar indicador
        gsap.to(contrastIndicator, {
          width: currentContrast ? '0%' : '100%',
          duration: 0.3,
          ease: 'power2.out'
        });
      });
    }
    
    if (fontSizeDecrease) {
      fontSizeDecrease.addEventListener('click', () => {
        if (fontSize > 85) {
          const newSize = fontSize - 5;
          updateFontSize(newSize);
        }
      });
    }
    
    if (fontSizeIncrease) {
      fontSizeIncrease.addEventListener('click', () => {
        if (fontSize < 120) {
          const newSize = fontSize + 5;
          updateFontSize(newSize);
        }
      });
    }
    
    function updateFontSize(newSize) {
      localStorage.setItem('fontSize', newSize.toString());
      document.documentElement.style.fontSize = `${newSize}%`;
      fontSizeValue.textContent = `${newSize}%`;
      
      // Actualizar slider
      const sliderWidth = ((newSize - 85) / (120 - 85)) * 100;
      gsap.to(fontSizeSlider, {
        width: `${sliderWidth}%`,
        duration: 0.3,
        ease: 'power2.out'
      });
    }
    
    if (motionToggle) {
      motionToggle.addEventListener('click', () => {
        const currentMotion = localStorage.getItem('enable-animations') !== 'false';
        localStorage.setItem('enable-animations', (!currentMotion).toString());
        document.documentElement.classList.toggle('reduce-motion', currentMotion);
        
        // Actualizar UI
        motionToggle.setAttribute('aria-checked', (!currentMotion).toString());
        motionToggle.classList.toggle('bg-blue-500', !currentMotion);
        motionToggle.classList.toggle('dark:bg-blue-600', !currentMotion);
        motionToggle.classList.toggle('bg-gray-200', currentMotion);
        motionToggle.classList.toggle('dark:bg-gray-700', currentMotion);
        
        // Animar handle
        if (!currentMotion) {
          gsap.to(motionToggleHandle, {
            x: '16px',
            duration: 0.2,
            ease: 'power1.out'
          });
        } else {
          gsap.to(motionToggleHandle, {
            x: '0px',
            duration: 0.2,
            ease: 'power1.out'
          });
        }
        
        // Actualizar GSAP
        if (currentMotion && window.gsap) {
          gsap.globalTimeline.timeScale(0.0001);
        } else if (window.gsap) {
          gsap.globalTimeline.timeScale(1);
        }
      });
    }
    
    if (spacingToggle) {
      spacingToggle.addEventListener('click', () => {
        const currentSpacing = localStorage.getItem('increased-spacing') === 'true';
        localStorage.setItem('increased-spacing', (!currentSpacing).toString());
        document.documentElement.classList.toggle('increased-spacing', !currentSpacing);
        
        // Actualizar UI
        spacingToggle.setAttribute('aria-checked', (!currentSpacing).toString());
        spacingToggle.classList.toggle('bg-blue-500', !currentSpacing);
        spacingToggle.classList.toggle('dark:bg-blue-600', !currentSpacing);
        spacingToggle.classList.toggle('bg-gray-200', currentSpacing);
        spacingToggle.classList.toggle('dark:bg-gray-700', currentSpacing);
        
        // Animar handle
        if (!currentSpacing) {
          gsap.to(spacingToggleHandle, {
            x: '16px',
            duration: 0.2,
            ease: 'power1.out'
          });
        } else {
          gsap.to(spacingToggleHandle, {
            x: '0px',
            duration: 0.2,
            ease: 'power1.out'
          });
        }
      });
    }
  }
  
  // Función para mejorar la interacción con el enlace de configuración
  function enhanceSettingsLink() {
    const settingsLink = document.getElementById('settings-link');
    
    if (settingsLink) {
      // Añadir animación al hover
      settingsLink.addEventListener('mouseenter', () => {
        gsap.to(settingsLink, {
          backgroundColor: 'rgba(59, 130, 246, 0.1)',
          x: 5,
          duration: 0.3,
          ease: 'power3.out'
        });
      });
      
      settingsLink.addEventListener('mouseleave', () => {
        gsap.to(settingsLink, {
          backgroundColor: 'transparent',
          x: 0,
          duration: 0.3,
          ease: 'power3.out'
        });
      });
      
      // Efecto de click
      settingsLink.addEventListener('click', (e) => {
        // Aplicar efecto de pulsación
        gsap.to(settingsLink, {
          scale: 0.97,
          duration: 0.1,
          ease: 'power2.out',
          onComplete: () => {
            gsap.to(settingsLink, {
              scale: 1,
              duration: 0.2,
              ease: 'back.out(2)'
            });
          }
        });
      });
    }
  }
  
  // Initialize
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      initMobileMenu();
      setupMobileNavHighlighting();
      setupHeaderToggles();
      enhanceSettingsLink();
    });
  } else {
    initMobileMenu();
    setupMobileNavHighlighting();
    setupHeaderToggles();
    enhanceSettingsLink();
  }
</script>

<style>
  /* Animación del header al hacer scroll */
  header {
    animation: header-shadow 0.5s linear;
  }
  
  @keyframes header-shadow {
    from {
      box-shadow: none;
    }
    to {
      box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1);
    }
  }
  
  /* Animaciones del menú */
  #menu-icon,
  #close-icon {
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1), 
                opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  /* Slide in animation para los items */
  @keyframes slide-in {
    from {
      transform: translateX(-20px);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
  
  .animate-slide-in {
    animation: slide-in 0.3s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }
  
  /* Mejora el scroll del menú en móvil */
  #mobile-menu nav {
    scrollbar-width: thin;
    scrollbar-color: rgb(156 163 175) transparent;
  }
  
  #mobile-menu nav::-webkit-scrollbar {
    width: 6px;
  }
  
  #mobile-menu nav::-webkit-scrollbar-track {
    background: transparent;
  }
  
  #mobile-menu nav::-webkit-scrollbar-thumb {
    background-color: rgb(156 163 175);
    border-radius: 3px;
  }
  
  .dark #mobile-menu nav::-webkit-scrollbar-thumb {
    background-color: rgb(75 85 99);
  }
  
  /* Efecto blur más pronunciado en móvil */
  @supports (backdrop-filter: blur(12px)) {
    header {
      backdrop-filter: blur(12px);
    }
  }
  
  /* Theme and accessibility toggle buttons */
  .theme-toggle-button, .accessibility-toggle {
    transition: all 0.2s ease;
  }
  
  .theme-toggle-button:hover, .accessibility-toggle:hover {
    transform: scale(1.05);
    background-color: rgba(0, 0, 0, 0.05);
  }
  
  .theme-toggle-button:active, .accessibility-toggle:active {
    transform: scale(0.95);
  }
  
  /* Asegurar que los dropdowns estén ocultos inicialmente */
  #theme-dropdown, #accessibility-panel {
    pointer-events: none;
  }
  
  /* Estilos para el panel de accesibilidad */
  .motion-toggle-handle,
  .spacing-toggle-handle {
    transform: translateX(0.25rem);
    transition: transform 0.2s ease;
  }
  
  .translate-x-5 {
    transform: translateX(1.25rem) !important;
  }
  
  .translate-x-1 {
    transform: translateX(0.25rem) !important;
  }
  
  /* High contrast mode */
  html.high-contrast {
    filter: contrast(1.3) saturate(1.2);
  }
  
  /* Reduce motion */
  html.reduce-motion * {
    animation-duration: 0.0001s !important;
    transition-duration: 0.0001s !important;
    scroll-behavior: auto !important;
  }
  
  /* Increased spacing */
  html.increased-spacing {
    letter-spacing: 0.025em;
    word-spacing: 0.05em;
    line-height: 1.5;
  }
  
  html.increased-spacing p,
  html.increased-spacing li,
  html.increased-spacing span {
    margin-bottom: 1.2em;
  }
  
  html.increased-spacing button,
  html.increased-spacing a {
    padding: 0.25em 0.5em;
  }
</style>