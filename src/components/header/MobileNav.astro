---
import ThemeToggle from '@components/ThemeToggle.astro';
import LanguageToggle from '@components/LanguageToggle.astro';
import type { HeaderItem } from '../../types/headerItem';

export interface Props {
  headerItems: HeaderItem[];
  lang: string;
}

const { headerItems, lang } = Astro.props;
---

<!-- Header Mobile -->
<div class='md:hidden flex items-center justify-between w-full px-4 py-3'>
  <!-- Logo + Menu Button -->
  <div class='flex items-center space-x-2'>
    <button
      id='mobile-menu-button'
      class='p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors'
      aria-label='Toggle menu'
    >
      <svg id='menu-icon' class='w-6 h-6' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
        <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M4 6h16M4 12h16M4 18h16'></path>
      </svg>
      <svg id='close-icon' class='w-6 h-6 hidden' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
        <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M6 18L18 6M6 6l12 12'></path>
      </svg>
    </button>
    <a href={lang === 'es' ? '/' : `/${lang}/`} class='flex items-center'>
      <img
        src='/assets/images/Fr4n0m Photo.webp'
        alt='Fr4n0m photo'
        class='rounded-full w-8 h-8'
      />
    </a>
  </div>

  <!-- Toggles -->
  <div class='flex items-center -mr-1'>
    <ThemeToggle />
    <LanguageToggle />
  </div>
</div>

<!-- Mobile Menu -->
<div
  id='mobile-menu'
  class='hidden md:hidden fixed top-[60px] left-0 right-0 bg-white dark:bg-gray-800 shadow-lg overflow-y-auto max-h-[calc(100vh-60px)]'
>
  <nav class='px-4 py-4'>
    {headerItems.map(item => (
      <a
        class='block px-3 py-3 mb-1 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors'
        aria-label={item.label}
        href={item.url}
        target={item.title === 'CV' ? '_blank' : '_self'}
      >
        {item.title}
      </a>
    ))}
  </nav>
</div>

<script>
  // Mobile menu functionality
  function initMobileMenu() {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const menuIcon = document.getElementById('menu-icon');
    const closeIcon = document.getElementById('close-icon');
    
    if (!mobileMenuButton || !mobileMenu || !menuIcon || !closeIcon) return;
    
    let isOpen = false;
    
    mobileMenuButton.addEventListener('click', () => {
      isOpen = !isOpen;
      if (isOpen) {
        mobileMenu.classList.remove('hidden');
        menuIcon.classList.add('hidden');
        closeIcon.classList.remove('hidden');
      } else {
        mobileMenu.classList.add('hidden');
        menuIcon.classList.remove('hidden');
        closeIcon.classList.add('hidden');
      }
    });
    
    // Close menu when clicking outside
    document.addEventListener('click', (event) => {
      if (!mobileMenuButton.contains(event.target as Node) && 
        !mobileMenu.contains(event.target as Node) && isOpen) {
        isOpen = false;
        mobileMenu.classList.add('hidden');
        menuIcon.classList.remove('hidden');
        closeIcon.classList.add('hidden');
      }
    });
    
    // Close menu when clicking on a link
    const menuLinks = mobileMenu.querySelectorAll('a');
    menuLinks.forEach(link => {
      link.addEventListener('click', () => {
        isOpen = false;
        mobileMenu.classList.add('hidden');
        menuIcon.classList.remove('hidden');
        closeIcon.classList.add('hidden');
      });
    });
  }

  document.addEventListener('DOMContentLoaded', () => {
    initMobileMenu();
  });
</script>

<style>
  /* Mobile menu animation */
  #mobile-menu {
    transition: all 0.3s ease-in-out;
  }

  #mobile-menu.hidden {
    transform: translateY(-10px);
    opacity: 0;
  }
</style>
