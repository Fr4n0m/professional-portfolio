---
import { languages, getCurrentLanguage, getLanguageSwitchUrl } from '@i18n/config';

// Obtener el idioma actual
const currentLang = getCurrentLanguage(Astro.url);

// Control Center para m√≥vil - Estilo macOS
---

<div class='relative'>
  <!-- Toggle Button -->
  <button
    type='button'
    class='control-center-toggle p-2 rounded-xl bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 transition-all duration-200'
    aria-label='Control Center'
  >
    <svg class='w-5 h-5' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
      <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z'></path>
      <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M15 12a3 3 0 11-6 0 3 3 0 016 0z'></path>
    </svg>
  </button>
  
  <!-- Control Center Menu -->
  <div
    class='control-center-menu absolute top-full mt-2 right-0 w-80 max-h-[calc(100vh-100px)] bg-white/95 dark:bg-gray-900/95 backdrop-blur-xl rounded-2xl shadow-2xl border border-gray-200/20 dark:border-gray-700/20 overflow-hidden opacity-0 scale-95 pointer-events-none transition-all duration-300'
  >
    <!-- User Profile Section -->
    <div class='profile-section p-4 border-b border-gray-200 dark:border-gray-700'>
      <div class='flex items-center gap-3'>
        <img
          src='/assets/images/Fr4n0m Photo.webp'
          alt='User photo'
          class='w-12 h-12 rounded-full object-cover'
        />
        <div>
          <p class='font-semibold text-gray-900 dark:text-white'>Francisco Jos√©</p>
          <p class='text-sm text-gray-600 dark:text-gray-400'>Full Stack Developer</p>
        </div>
      </div>
    </div>
    
    <!-- Main Panel -->
    <div class='main-panel'>
      <!-- Quick Actions Grid -->
      <div class='p-4 grid grid-cols-2 gap-3 border-b border-gray-200 dark:border-gray-700'>
        <!-- Theme Toggle -->
        <button class='theme-control-btn p-4 rounded-xl bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 transition-all duration-200 text-center' data-action='theme'>
          <svg class='w-6 h-6 mx-auto mb-2' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
            <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z'></path>
          </svg>
          <span class='text-xs text-gray-700 dark:text-gray-300'>Tema</span>
        </button>
        
        <!-- Language Toggle -->
        <button class='lang-control-btn p-4 rounded-xl bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 transition-all duration-200 text-center' data-action='language'>
          <span class='text-2xl mb-2 block'>{languages[currentLang]?.flag || 'üåê'}</span>
          <span class='text-xs text-gray-700 dark:text-gray-300'>Idioma</span>
        </button>
      </div>
      
      <!-- Accessibility Settings -->
      <div class='p-4 space-y-3'>
        <h3 class='text-sm font-semibold text-gray-900 dark:text-white mb-3'>Accesibilidad</h3>
        
        <!-- Font Size -->
        <div class='flex items-center justify-between'>
          <span class='text-sm text-gray-700 dark:text-gray-300'>Tama√±o de texto</span>
          <div class='flex items-center gap-2'>
            <button class='font-size-control p-1 rounded hover:bg-gray-100 dark:hover:bg-gray-800' data-action='font-decrease'>
              <svg class='w-4 h-4' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
                <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M18 12H6'></path>
              </svg>
            </button>
            <span class='font-size-value text-sm font-medium px-2'>100%</span>
            <button class='font-size-control p-1 rounded hover:bg-gray-100 dark:hover:bg-gray-800' data-action='font-increase'>
              <svg class='w-4 h-4' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
                <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 6v12m6-6H6'></path>
              </svg>
            </button>
          </div>
        </div>
        
        <!-- Contrast -->
        <div class='flex items-center justify-between'>
          <span class='text-sm text-gray-700 dark:text-gray-300'>Alto contraste</span>
          <button class='contrast-toggle relative w-11 h-6 bg-gray-200 dark:bg-gray-700 rounded-full transition-colors duration-300' data-action='contrast'>
            <span class='absolute left-0.5 top-0.5 w-5 h-5 bg-white rounded-full shadow-sm transition-transform duration-300'></span>
          </button>
        </div>
        
        <!-- Animations -->
        <div class='flex items-center justify-between'>
          <span class='text-sm text-gray-700 dark:text-gray-300'>Animaciones</span>
          <button class='animations-toggle relative w-11 h-6 bg-blue-500 rounded-full transition-colors duration-300' data-action='animations' data-enabled='true'>
            <span class='absolute right-0.5 top-0.5 w-5 h-5 bg-white rounded-full shadow-sm transition-transform duration-300'></span>
          </button>
        </div>
      </div>
      
      <!-- Additional Settings -->
      <div class='p-4 border-t border-gray-200 dark:border-gray-700'>
        <button class='w-full text-left p-3 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors duration-200'>
          <span class='text-sm text-gray-700 dark:text-gray-300'>Configuraci√≥n avanzada</span>
        </button>
      </div>
    </div>
    
    <!-- Language Panel (Initially Hidden) -->
    <div class='language-panel hidden'>
      <div class='p-4 border-b border-gray-200 dark:border-gray-700'>
        <div class='flex items-center justify-between'>
          <h3 class='text-sm font-semibold text-gray-900 dark:text-white'>Seleccionar idioma</h3>
          <button class='back-btn p-1 rounded hover:bg-gray-100 dark:hover:bg-gray-800'>
            <svg class='w-5 h-5' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
              <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M15 19l-7-7 7-7'></path>
            </svg>
          </button>
        </div>
      </div>
      <div class='p-4 grid grid-cols-2 gap-2 max-h-96 overflow-y-auto'>
        {Object.entries(languages).map(([code, langInfo]) => {
          const url = getLanguageSwitchUrl(Astro.url, code);
          const isActive = code === currentLang;
          return (
            <a
              href={url}
              class={`p-3 rounded-lg text-center transition-colors duration-200 ${
                isActive 
                  ? 'bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400' 
                  : 'hover:bg-gray-100 dark:hover:bg-gray-800'
              }`}
            >
              <span class='text-2xl block mb-1'>{langInfo.flag}</span>
              <span class='text-xs'>{langInfo.nativeName}</span>
            </a>
          );
        })}
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const toggle = document.querySelector('.control-center-toggle');
    const menu = document.querySelector('.control-center-menu');
    const mainPanel = menu?.querySelector('.main-panel');
    const languagePanel = menu?.querySelector('.language-panel');
    
    if (!toggle || !menu || !mainPanel || !languagePanel) return;
    
    let isOpen = false;
    
    // Toggle menu
    toggle.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      
      isOpen = !isOpen;
      
      if (isOpen) {
        menu.classList.remove('opacity-0', 'scale-95', 'pointer-events-none');
        menu.classList.add('opacity-100', 'scale-100');
      } else {
        menu.classList.add('opacity-0', 'scale-95', 'pointer-events-none');
        menu.classList.remove('opacity-100', 'scale-100');
        // Reset to main panel when closing
        mainPanel.classList.remove('hidden');
        languagePanel.classList.add('hidden');
      }
    });
    
    // Close on outside click
    document.addEventListener('click', (e) => {
      if (!toggle.contains(e.target) && !menu.contains(e.target) && isOpen) {
        isOpen = false;
        menu.classList.add('opacity-0', 'scale-95', 'pointer-events-none');
        menu.classList.remove('opacity-100', 'scale-100');
        mainPanel.classList.remove('hidden');
        languagePanel.classList.add('hidden');
      }
    });
    
    // Theme control
    const themeBtn = menu.querySelector('[data-action="theme"]');
    if (themeBtn) {
      themeBtn.addEventListener('click', () => {
        const currentTheme = localStorage.getItem('theme') || 'system';
        const nextTheme = currentTheme === 'light' ? 'dark' : currentTheme === 'dark' ? 'system' : 'light';
        localStorage.setItem('theme', nextTheme);
        
        const isDark = nextTheme === 'dark' || (nextTheme === 'system' && window.matchMedia('(prefers-color-scheme: dark)').matches);
        document.documentElement.classList.toggle('dark', isDark);
        
        // Update theme button icon
        const svg = themeBtn.querySelector('svg');
        if (svg) {
          if (nextTheme === 'light') {
            svg.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path>';
          } else if (nextTheme === 'dark') {
            svg.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path>';
          } else {
            svg.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>';
          }
        }
      });
    }
    
    // Language control
    const langBtn = menu.querySelector('[data-action="language"]');
    const backBtn = languagePanel.querySelector('.back-btn');
    
    if (langBtn) {
      langBtn.addEventListener('click', () => {
        mainPanel.classList.add('hidden');
        languagePanel.classList.remove('hidden');
      });
    }
    
    if (backBtn) {
      backBtn.addEventListener('click', () => {
        mainPanel.classList.remove('hidden');
        languagePanel.classList.add('hidden');
      });
    }
    
    // Font size controls
    let fontSize = 100;
    const fontSizeSpan = menu.querySelector('.font-size-value');
    
    menu.querySelector('[data-action="font-decrease"]')?.addEventListener('click', () => {
      if (fontSize > 85) {
        fontSize -= 5;
        document.documentElement.style.fontSize = `${fontSize}%`;
        if (fontSizeSpan) fontSizeSpan.textContent = `${fontSize}%`;
      }
    });
    
    menu.querySelector('[data-action="font-increase"]')?.addEventListener('click', () => {
      if (fontSize < 120) {
        fontSize += 5;
        document.documentElement.style.fontSize = `${fontSize}%`;
        if (fontSizeSpan) fontSizeSpan.textContent = `${fontSize}%`;
      }
    });
    
    // Contrast toggle
    const contrastToggle = menu.querySelector('[data-action="contrast"]');
    if (contrastToggle) {
      contrastToggle.addEventListener('click', () => {
        document.documentElement.classList.toggle('high-contrast');
        const span = contrastToggle.querySelector('span');
        span?.classList.toggle('translate-x-5');
        contrastToggle.classList.toggle('bg-blue-500');
      });
    }
    
    // Animations toggle
    const animationsToggle = menu.querySelector('[data-action="animations"]');
    if (animationsToggle) {
      animationsToggle.addEventListener('click', () => {
        const isEnabled = animationsToggle.dataset.enabled === 'true';
        animationsToggle.dataset.enabled = (!isEnabled).toString();
        
        if (!isEnabled) {
          document.documentElement.classList.add('reduce-motion');
          animationsToggle.classList.add('bg-blue-500');
          animationsToggle.querySelector('span')?.classList.add('translate-x-5');
        } else {
          document.documentElement.classList.remove('reduce-motion');
          animationsToggle.classList.remove('bg-blue-500');
          animationsToggle.querySelector('span')?.classList.remove('translate-x-5');
        }
      });
    }
  });
</script>

<style>
  /* Control Center specific styles */
  .control-center-menu {
    box-shadow: 0 25px 50px -12px rgb(0 0 0 / 0.25);
  }
  
  /* High contrast mode */
  .high-contrast {
    filter: contrast(1.2);
  }
  
  .high-contrast .control-center-menu {
    background-color: rgb(255 255 255 / 0.98);
  }
  
  .dark .high-contrast .control-center-menu {
    background-color: rgb(17 24 39 / 0.98);
  }
  
  /* Smooth transitions for toggles */
  .contrast-toggle span,
  .animations-toggle span {
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .translate-x-5 {
    transform: translateX(1.25rem);
  }
  
  /* Reduce motion */
  .reduce-motion * {
    animation-duration: 0s !important;
    transition-duration: 0s !important;
  }
  
  /* Scrollbar for language panel */
  .language-panel .grid::-webkit-scrollbar {
    width: 6px;
  }
  
  .language-panel .grid::-webkit-scrollbar-track {
    background: transparent;
  }
  
  .language-panel .grid::-webkit-scrollbar-thumb {
    background: rgba(128, 128, 128, 0.3);
    border-radius: 3px;
  }
  
  .language-panel .grid::-webkit-scrollbar-thumb:hover {
    background: rgba(128, 128, 128, 0.5);
  }
</style>
