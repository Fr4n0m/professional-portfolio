---
import { languages, getCurrentLanguage, getLanguageSwitchUrl } from '@i18n/config';
import type { Translations } from '../../../types/translations';

// Obtener el idioma actual
const currentLang = getCurrentLanguage(Astro.url);

// Obtener traducciones
const translations: Translations = Astro.props.translations;
const t = translations.controlCenter;

// Control Center para m√≥vil - Estilo macOS
---

<div class='relative'>
  <!-- Toggle Button -->
  <button
    type='button'
    class='control-center-toggle p-2 rounded-xl bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 transition-all duration-200'
    aria-label='Control Center'
  >
    <svg class='w-5 h-5 text-gray-700 dark:text-gray-300' fill='none' stroke='currentColor' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'>
      <!-- Toggle switches icon similar to macOS -->
      <rect x='3' y='4' width='18' height='6' rx='3' stroke-width='2' />
      <circle cx='16' cy='7' r='2' fill='currentColor' />
      <rect x='3' y='14' width='18' height='6' rx='3' stroke-width='2' />
      <circle cx='8' cy='17' r='2' fill='currentColor' />
    </svg>
  </button>
  
  <!-- Control Center Menu -->
  <div
    class='control-center-menu absolute top-full mt-2 right-0 w-80 max-h-[calc(100vh-100px)] bg-white/95 dark:bg-gray-900/95 backdrop-blur-xl rounded-2xl shadow-2xl border border-gray-200/20 dark:border-gray-700/20 overflow-hidden opacity-0 scale-95 pointer-events-none transition-all duration-300'
  >
    <!-- User Profile Section -->
    <div class='profile-section p-4 border-b border-gray-200 dark:border-gray-700'>
      <div class='flex items-center gap-3'>
        <img
          src='/assets/images/Fr4n0m Photo.webp'
          alt='User photo'
          class='w-12 h-12 rounded-full object-cover'
        />
        <div>
          <p class='font-semibold text-gray-900 dark:text-white'>{t.profile.name}</p>
          <p class='text-sm text-gray-600 dark:text-gray-400'>{t.profile.role}</p>
        </div>
      </div>
    </div>
    
    <!-- Main Panel -->
    <div class='main-panel'>
      <!-- Quick Actions Grid -->
      <div class='p-4 grid grid-cols-2 gap-3 border-b border-gray-200 dark:border-gray-700'>
        <!-- Theme Toggle -->
        <button class='theme-control-btn p-3 rounded-xl bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 transition-all duration-200 text-center' data-action='theme'>
          <!-- Iconos para cada tema (solo se muestra el activo) -->
          <div class="relative w-8 h-8 mx-auto mb-1">
            <svg class='w-8 h-8 mx-auto theme-icon-light absolute top-0 left-0 text-amber-500' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
              <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z'></path>
            </svg>
            <svg class='w-8 h-8 mx-auto theme-icon-dark absolute top-0 left-0 text-indigo-500' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
              <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z'></path>
            </svg>
            <svg class='w-8 h-8 mx-auto theme-icon-system absolute top-0 left-0 text-gray-600 dark:text-gray-300' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
              <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z'></path>
            </svg>
          </div>
          <span class='text-xs text-gray-700 dark:text-gray-300'>{t.quickActions.theme.label}</span>
        </button>
        
        <!-- Language Toggle -->
        <button class='lang-control-btn p-3 rounded-xl bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 transition-all duration-200 text-center' data-action='language'>
          <div class="w-8 h-8 mx-auto mb-1 flex items-center justify-center">
            <span class='text-3xl lang-flag-icon'>{languages[currentLang]?.flag || 'üåê'}</span>
          </div>
          <span class='text-xs text-gray-700 dark:text-gray-300'>{t.quickActions.language.label}</span>
        </button>
      </div>
      
      <!-- Accessibility Settings -->
      <div class='p-4 space-y-3'>
        <h3 class='text-sm font-semibold text-gray-900 dark:text-white mb-3'>{t.accessibility.title}</h3>
        
        <!-- Font Size -->
        <div class='flex items-center justify-between py-1.5'>
          <span class='text-sm text-gray-700 dark:text-gray-300'>{t.accessibility.fontSize.label}</span>
          <div class='flex items-center gap-3'>
            <button class='font-size-control p-1.5 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800' data-action='font-decrease'>
              <svg class='w-5 h-5 text-gray-700 dark:text-gray-300' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
                <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M18 12H6'></path>
              </svg>
            </button>
            <span class='font-size-value text-sm font-medium px-2 text-gray-900 dark:text-gray-100'>100%</span>
            <button class='font-size-control p-1.5 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800' data-action='font-increase'>
              <svg class='w-5 h-5 text-gray-700 dark:text-gray-300' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
                <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 6v12m6-6H6'></path>
              </svg>
            </button>
          </div>
        </div>
        
        <!-- Contrast -->
        <div class='flex items-center justify-between py-1.5'>
          <span class='text-sm text-gray-700 dark:text-gray-300'>{t.accessibility.contrast.label}</span>
          <div class="switch-parent">
            <input type="checkbox" class="checkbox" id="contrast-checkbox" aria-label={t.accessibility.contrast.toggle} />
            <label class="switch" for="contrast-checkbox" data-action='contrast'>
              <span class="slider"></span>
            </label>
          </div>
        </div>
        
        <!-- Animations -->
        <div class='flex items-center justify-between py-1.5'>
          <span class='text-sm text-gray-700 dark:text-gray-300'>{t.accessibility.animations.label}</span>
          <div class="switch-parent">
            <input type="checkbox" class="checkbox" id="animations-checkbox" checked aria-label={t.accessibility.animations.toggle} />
            <label class="switch" for="animations-checkbox" data-action='animations' data-enabled='true'>
              <span class="slider"></span>
            </label>
          </div>
        </div>
      </div>
      
      <!-- Additional Settings -->
      <div class='p-4 border-t border-gray-200 dark:border-gray-700'>
        <button class='w-full text-left p-3 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors duration-200'>
          <span class='text-sm text-gray-700 dark:text-gray-300'>{t.settings.advanced}</span>
        </button>
      </div>
    </div>
    
    <!-- Language Panel (Initially Hidden) -->
    <div class='language-panel hidden'>
      <div class='p-4 border-b border-gray-200 dark:border-gray-700'>
        <div class='flex items-center justify-between'>
          <h3 class='text-sm font-semibold text-gray-900 dark:text-white'>{t.quickActions.language.title}</h3>
          <button class='back-btn p-1 rounded hover:bg-gray-100 dark:hover:bg-gray-800'>
            <svg class='w-5 h-5 text-gray-700 dark:text-gray-300' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
              <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M15 19l-7-7 7-7'></path>
            </svg>
          </button>
        </div>
      </div>
      <div class='p-4 grid grid-cols-2 gap-2 max-h-96 overflow-y-auto'>
        {Object.entries(languages).map(([code, langInfo]) => {
          const url = getLanguageSwitchUrl(Astro.url, code);
          const isActive = code === currentLang;
          return (
            <a
              href={url}
              class={`p-3 rounded-lg text-center transition-colors duration-200 ${
                isActive 
                  ? 'bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400' 
                  : 'hover:bg-gray-100 dark:hover:bg-gray-800'
              }`}
            >
              <span class='text-2xl block mb-1'>{langInfo.flag}</span>
              <span class='text-xs text-gray-700 dark:text-gray-300'>{langInfo.nativeName}</span>
            </a>
          );
        })}
      </div>
    </div>
  </div>
</div>

<script>
  import { gsap } from 'gsap';

  document.addEventListener('DOMContentLoaded', () => {
    const toggle = document.querySelector('.control-center-toggle');
    const menu = document.querySelector('.control-center-menu');
    const mainPanel = menu?.querySelector('.main-panel');
    const languagePanel = menu?.querySelector('.language-panel');
    
    if (!toggle || !menu || !mainPanel || !languagePanel) return;
    
    // Inicializar el tema correcto al cargar
    const currentTheme = localStorage.getItem('theme') || 'system';
    document.documentElement.classList.add(currentTheme);
    const isDarkMode = currentTheme === 'dark' || 
                       (currentTheme === 'system' && window.matchMedia('(prefers-color-scheme: dark)').matches);
    if (isDarkMode) {
      document.documentElement.classList.add('dark');
    }
    
    let isOpen = false;
    
    // Animar apertura/cierre del men√∫ con GSAP
    const animateMenu = (open) => {
      if (open) {
        // Mostrar primero para animaci√≥n
        menu.classList.remove('pointer-events-none');
        gsap.to(menu, {
          opacity: 1,
          scale: 1,
          duration: 0.3,
          ease: 'back.out(1.7)',
          onStart: () => {
            // Necesario para que la animaci√≥n sea visible
            menu.style.display = 'block';
          }
        });
      } else {
        gsap.to(menu, {
          opacity: 0,
          scale: 0.95,
          duration: 0.2,
          ease: 'power3.in',
          onComplete: () => {
            menu.classList.add('pointer-events-none');
            // Reset to main panel when closing
            mainPanel.classList.remove('hidden');
            languagePanel.classList.add('hidden');
          }
        });
      }
    };
    
    // Toggle menu
    toggle.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      
      isOpen = !isOpen;
      animateMenu(isOpen);
    });
    
    // Close on outside click
    document.addEventListener('click', (e) => {
      if (!toggle.contains(e.target) && !menu.contains(e.target) && isOpen) {
        isOpen = false;
        animateMenu(false);
      }
    });
    
    // Theme control
    const themeBtn = menu.querySelector('[data-action="theme"]');
    if (themeBtn) {
      // Actualizar icono seg√∫n el tema actual al inicio
      const updateThemeButtonIcon = (theme) => {
        document.documentElement.classList.remove('light', 'dark', 'system');
        document.documentElement.classList.add(theme);
        
        const isDark = theme === 'dark' || 
          (theme === 'system' && window.matchMedia('(prefers-color-scheme: dark)').matches);
        
        if (isDark) {
          document.documentElement.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
        }
      };
      
      // Inicializar con el tema actual
      const currentTheme = localStorage.getItem('theme') || 'system';
      updateThemeButtonIcon(currentTheme);
      
      themeBtn.addEventListener('click', () => {
        const currentTheme = localStorage.getItem('theme') || 'system';
        const nextTheme = currentTheme === 'light' ? 'dark' : currentTheme === 'dark' ? 'system' : 'light';
        localStorage.setItem('theme', nextTheme);
        
        // Actualizar clases y apariencia
        updateThemeButtonIcon(nextTheme);
      });
    }
    
    // Language control
    const langBtn = menu.querySelector('[data-action="language"]');
    const backBtn = languagePanel.querySelector('.back-btn');
    
    if (langBtn) {
      langBtn.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        // Asegurar que el panel de lenguaje es visible
        languagePanel.style.display = 'block';
        
        gsap.to(mainPanel, {
          opacity: 0,
          duration: 0.2,
          onComplete: () => {
            mainPanel.classList.add('hidden');
            languagePanel.classList.remove('hidden');
            gsap.fromTo(languagePanel, 
              { opacity: 0, x: 20 },
              { opacity: 1, x: 0, duration: 0.3 }
            );
          }
        });
      });
    }
    
    if (backBtn) {
      backBtn.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        gsap.to(languagePanel, {
          opacity: 0,
          duration: 0.2,
          onComplete: () => {
            languagePanel.classList.add('hidden');
            mainPanel.classList.remove('hidden');
            mainPanel.style.display = 'block';
            gsap.fromTo(mainPanel, 
              { opacity: 0, x: -20 },
              { opacity: 1, x: 0, duration: 0.3 }
            );
          }
        });
      });
    }
    
    // Font size controls
    let fontSize = parseInt(localStorage.getItem('fontSize') || '100');
    const fontSizeSpan = menu.querySelector('.font-size-value');
    
    // Apply saved font size on load
    const applyFontSize = (size) => {
      // Update HTML root font size
      document.documentElement.style.fontSize = `${size}%`;
      // Update data attribute for CSS classes
      document.documentElement.setAttribute('data-font-size', size.toString());
      // Update display
      if (fontSizeSpan) fontSizeSpan.textContent = `${size}%`;
      // Save preference
      localStorage.setItem('fontSize', size.toString());
    };
    
    // Initialize font size
    applyFontSize(fontSize);
    
    menu.querySelector('[data-action="font-decrease"]')?.addEventListener('click', () => {
      if (fontSize > 85) {
        fontSize -= 5;
        applyFontSize(fontSize);
        
        // Animaci√≥n de feedback
        gsap.fromTo(fontSizeSpan, 
          { scale: 0.8 },
          { scale: 1, duration: 0.3, ease: 'back.out(1.7)' }
        );
      }
    });
    
    menu.querySelector('[data-action="font-increase"]')?.addEventListener('click', () => {
      if (fontSize < 120) {
        fontSize += 5;
        applyFontSize(fontSize);
        
        // Animaci√≥n de feedback
        gsap.fromTo(fontSizeSpan, 
          { scale: 1.2 },
          { scale: 1, duration: 0.3, ease: 'back.out(1.7)' }
        );
      }
    });
    
    // Contrast toggle con switch estilo iOS
    const contrastToggle = menu.querySelector('[data-action="contrast"]');
    const contrastCheckbox = document.getElementById('contrast-checkbox');
    
    // Cargar estado de alto contraste guardado
    const loadContrastState = () => {
      const contrastEnabled = localStorage.getItem('high-contrast') === 'true';
      document.documentElement.classList.toggle('high-contrast', contrastEnabled);
      
      if (contrastCheckbox) {
        contrastCheckbox.checked = contrastEnabled;
      }
    };
    
    // Inicializar estado
    loadContrastState();
    
    if (contrastCheckbox && contrastToggle) {
      contrastCheckbox.addEventListener('change', () => {
        const nextState = contrastCheckbox.checked;
        
        // Guardar preferencia
        localStorage.setItem('high-contrast', nextState.toString());
        
        // Actualizar UI
        document.documentElement.classList.toggle('high-contrast', nextState);
      });
      
      // Tambi√©n permitir hacer clic en el label para activar/desactivar
      contrastToggle.addEventListener('click', (e) => {
        // Evitar doble activaci√≥n por propagaci√≥n de eventos
        if (e.target === contrastToggle) {
          contrastCheckbox.checked = !contrastCheckbox.checked;
          const event = new Event('change');
          contrastCheckbox.dispatchEvent(event);
        }
      });
    }
    
    // Animations toggle con switch estilo iOS
    const animationsToggle = menu.querySelector('[data-action="animations"]');
    const animationsCheckbox = document.getElementById('animations-checkbox');
    
    // Cargar estado de animaciones guardado
    const loadAnimationsState = () => {
      const animationsEnabled = localStorage.getItem('enable-animations') !== 'false'; // Por defecto activado
      document.documentElement.classList.toggle('reduce-motion', !animationsEnabled);
      
      if (animationsCheckbox) {
        animationsCheckbox.checked = animationsEnabled;
      }
      
      // Desactivar animaciones GSAP si es necesario
      if (!animationsEnabled && window.gsap) {
        gsap.globalTimeline.timeScale(0.0001); // Pr√°cticamente congelamos las animaciones
      } else if (window.gsap) {
        gsap.globalTimeline.timeScale(1); // Restauramos la velocidad normal
      }
    };
    
    // Inicializar estado de animaciones
    loadAnimationsState();
    
    if (animationsCheckbox && animationsToggle) {
      animationsCheckbox.addEventListener('change', () => {
        const nextState = animationsCheckbox.checked;
        
        // Guardar preferencia
        localStorage.setItem('enable-animations', nextState.toString());
        
        // Actualizar UI
        document.documentElement.classList.toggle('reduce-motion', !nextState);
        
        // Activar/desactivar animaciones GSAP
        if (!nextState && window.gsap) {
          gsap.globalTimeline.timeScale(0.0001); // Pr√°cticamente congelamos las animaciones
          
          // Notificamos al usuario que se han desactivado las animaciones
          const notification = document.createElement('div');
          notification.className = 'fixed bottom-4 right-4 bg-blue-500 text-white py-2 px-4 rounded-lg shadow-lg';
          notification.style.zIndex = '9999';
          notification.textContent = 'Animaciones desactivadas';
          document.body.appendChild(notification);
          
          // Removemos la notificaci√≥n despu√©s de 2 segundos
          setTimeout(() => {
            if (notification.parentNode) {
              notification.parentNode.removeChild(notification);
            }
          }, 2000);
        } else if (window.gsap) {
          gsap.globalTimeline.timeScale(1); // Restauramos la velocidad normal
          
          // Notificamos al usuario que se han activado las animaciones
          const notification = document.createElement('div');
          notification.className = 'fixed bottom-4 right-4 bg-blue-500 text-white py-2 px-4 rounded-lg shadow-lg';
          notification.style.zIndex = '9999';
          notification.textContent = 'Animaciones activadas';
          document.body.appendChild(notification);
          
          // Removemos la notificaci√≥n despu√©s de 2 segundos
          setTimeout(() => {
            if (notification.parentNode) {
              notification.parentNode.removeChild(notification);
            }
          }, 2000);
        }
      });
      
      // Tambi√©n permitir hacer clic en el label para activar/desactivar
      animationsToggle.addEventListener('click', (e) => {
        // Evitar doble activaci√≥n por propagaci√≥n de eventos
        if (e.target === animationsToggle) {
          animationsCheckbox.checked = !animationsCheckbox.checked;
          const event = new Event('change');
          animationsCheckbox.dispatchEvent(event);
        }
      });
    }
  });
</script>

<style>
  /* Control Center specific styles */
  .control-center-menu {
    box-shadow: 0 25px 50px -12px rgb(0 0 0 / 0.25);
  }
  
  /* High contrast mode */
  html.high-contrast {
    filter: contrast(1.3) saturate(1.2);
  }
  
  html.high-contrast img,
  html.high-contrast video {
    filter: contrast(1.1) saturate(1.2);
  }
  
  html.high-contrast .control-center-menu {
    background-color: rgb(255 255 255 / 0.98);
  }
  
  html.dark.high-contrast .control-center-menu {
    background-color: rgb(17 24 39 / 0.98);
  }
  
  html.high-contrast button,
  html.high-contrast a {
    outline: 1px solid transparent;
  }
  
  html.high-contrast button:focus,
  html.high-contrast a:focus {
    outline-color: #1F429F;
  }
  
  html.dark.high-contrast button:focus,
  html.dark.high-contrast a:focus {
    outline-color: #facc15;
  }
  
/* The switch - the box around the slider */
  .switch-parent {
    width: 38px;
    height: 22px;
    position: relative;
  }
  /* Hide default HTML checkbox */
  .checkbox {
    opacity: 0;
    width: 0;
    height: 0;
    position: absolute;
  }
  .switch {
    width: 100%;
    height: 100%;
    display: block;
    background-color: #e9e9eb;
    border-radius: 10px;
    cursor: pointer;
    transition: all 0.2s ease-out;
    box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.1), 0px 1px 1px rgba(0, 0, 0, 0.06);
  }
  
  /* A√±adir efecto de hover para mejorar la usabilidad */
  .switch:hover {
    box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.15);
  }
  
  .switch:hover .slider {
    transform: scale(1.05);
  }
  /* Estilo para el switch en modo oscuro - estado no activo */
  html.dark .switch {
    background-color: #3d4454;
  }
  /* The slider */
  .slider {
    width: 18px;
    height: 18px;
    position: absolute;
    left: calc(50% - 18px / 2 - 8px);
    top: calc(50% - 18px / 2);
    border-radius: 14px;
    background: #ffffff;
    box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.1), 0px 1px 1px rgba(0, 0, 0, 0.06);
    transition: all 0.2s ease-out;
    cursor: pointer;
  }
  /* Estilo para el slider en modo oscuro */
  html.dark .slider {
    background: #e2e8f0;
  }
  .switch-parent:active .slider {
    width: 22px;
    border-radius: 14px;
  }
  .checkbox:checked + .switch:active .slider {
    width: 22px;
    left: calc(30% - 18px / 2 + 10px);
  }
  .checkbox:checked + .switch {
    background-color: #34c759;
  }
  /* Color espec√≠fico para tema oscuro */
  html.dark .checkbox:checked + .switch {
    background-color: #facc15;
  }
  .checkbox:checked + .switch .slider {
    left: calc(50% - 18px / 2 + 8px);
    top: calc(50% - 18px / 2);
  }
  
  /* Reduce motion */
  html.reduce-motion * {
    animation-duration: 0.0001s !important;
    transition-duration: 0.0001s !important;
    scroll-behavior: auto !important;
  }
  
  html.reduce-motion .gsap-fade-in,
  html.reduce-motion .gsap-stagger,
  html.reduce-motion .gsap-stagger-item,
  html.reduce-motion .gsap-scale {
    opacity: 1 !important;
    transform: none !important;
    transition: none !important;
  }
  
  /* Scrollbar for language panel */
  .language-panel .grid::-webkit-scrollbar {
    width: 6px;
  }
  
  .language-panel .grid::-webkit-scrollbar-track {
    background: transparent;
  }
  
  .language-panel .grid::-webkit-scrollbar-thumb {
    background: rgba(128, 128, 128, 0.3);
    border-radius: 3px;
  }
  
  .language-panel .grid::-webkit-scrollbar-thumb:hover {
    background: rgba(128, 128, 128, 0.5);
  }
  
  /* Peque√±a animaci√≥n de feedback para los botones */
  button:active {
    transform: scale(0.97);
  }
  
  /* Estilos para los iconos de tema */
  .theme-icon-light,
  .theme-icon-dark,
  .theme-icon-system {
    opacity: 0;
    transform: scale(0);
    transition: opacity 0.3s ease, transform 0.3s ease;
  }
  
  /* Estado activo para cada tema */
  :root:not(.dark) .theme-icon-light {
    opacity: 1;
    transform: scale(1);
  }
  
  :root.dark .theme-icon-dark {
    opacity: 1;
    transform: scale(1);
  }
  
  :root.system .theme-icon-system {
    opacity: 1;
    transform: scale(1);
  }
  
  /* Animaci√≥n de hover para los iconos */
  .theme-control-btn:hover .theme-icon-light,
  .theme-control-btn:hover .theme-icon-dark,
  .theme-control-btn:hover .theme-icon-system {
    filter: brightness(1.2);
  }
  
  .theme-control-btn:active [class^="theme-icon"],
  .theme-control-btn:active [class*=" theme-icon"] {
    transform: scale(0.9);
  }
  
  /* Animaci√≥n para el icono de bandera */
  .lang-control-btn:hover .lang-flag-icon {
    transform: scale(1.1) rotate(5deg);
    filter: brightness(1.2);
    transition: transform 0.2s ease, filter 0.2s ease;
  }
  
  .lang-flag-icon {
    display: inline-block;
    transition: transform 0.2s ease, filter 0.2s ease;
  }
  
  .lang-control-btn:active .lang-flag-icon {
    transform: scale(0.9);
  }
</style>
