---
// Componente para el menú desplegable de navegación
interface Props {
  title: string;
  dataSection: string;
  ariaLabel: string;
  items: {
    title: string;
    url: string;
    isExternal?: boolean;
  }[];
}

const { title, dataSection, ariaLabel, items } = Astro.props;
---

<div class="dropdown-nav-item relative group">
  <button 
    class="nav-link dropdown-toggle block px-3 py-2 transition text-nowrap relative hover-effect" 
    data-section={dataSection}
    aria-label={ariaLabel}
    aria-haspopup="true" 
    aria-expanded="false"
  >
    <span class="relative z-10 flex items-center">
      {title}
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1 transition-transform duration-300 group-hover:rotate-180" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
      </svg>
    </span>
  </button>
  
  <div class="dropdown-menu absolute z-40 left-0 hidden pt-2 group-hover:block min-w-[190px]">
    <div class="bg-white/90 dark:bg-gray-800/95 backdrop-blur-md rounded-lg shadow-lg ring-1 ring-gray-200 dark:ring-gray-700 py-1.5 transition-all duration-300 origin-top scale-95 opacity-0 group-hover:scale-100 group-hover:opacity-100 w-full">
      {items.map(item => {
        const isActive = item.url.includes('#') && item.url.split('#')[1] === dataSection;
        return (
          <a 
            href={item.url} 
            class={`block px-4 py-2 text-sm transition-opacity ${isActive ? 'font-semibold active-link' : 'text-gray-700 dark:text-white hover:opacity-85'}`}
            target={item.isExternal ? "_blank" : "_self"}
            rel={item.isExternal ? "noopener noreferrer" : ""}
            data-section={item.url.includes('#') ? item.url.split('#')[1] : ''}
          >
            {item.title}
          </a>
        );
      })}
    </div>
  </div>
</div>

<style>
  /* Estilos para el menú desplegable */
  .dropdown-menu {
    transform-origin: top center;
    transition: all 0.25s ease;
    width: max-content; /* Asegurar que el ancho se ajuste al contenido */
    min-width: 190px; /* Valor mínimo */
  }
  
  /* Evitar que el menú desaparezca inmediatamente */
  .dropdown-menu::before {
    content: '';
    position: absolute;
    top: -10px;
    left: 0;
    right: 0;
    height: 10px;
  }
  
  /* Estilo para la flecha */
  .dropdown-toggle svg {
    transition: transform 0.2s ease;
  }
  
  /* Rotación de la flecha en hover */
  .dropdown-nav-item:hover .dropdown-toggle svg {
    transform: rotate(180deg);
  }
  
  /* Hover para elementos del dropdown */
  .dropdown-menu a:hover {
    opacity: 0.85;
  }
  
  /* Estilo para el enlace activo */
  .active-link {
    @apply text-blue-800 dark:text-yellow-300;
    position: relative;
  }
</style>

<script>
  // Este código se ejecuta en el cliente, después de que el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    // Manejo del tema oscuro para los enlaces activos
    const updateActiveLinks = () => {
      const isDark = document.documentElement.classList.contains('dark');
      const activeLinks = document.querySelectorAll('.active-link');
      activeLinks.forEach(link => {
        if (isDark) {
          link.classList.add('text-yellow-300');
          link.classList.remove('text-blue-800');
        } else {
          link.classList.add('text-blue-800');
          link.classList.remove('text-yellow-300');
        }
      });
    };
    
    // Actualizar los enlaces activos inicialmente
    updateActiveLinks();
    
    // Observar cambios en el tema
    const observer = new MutationObserver(mutations => {
      mutations.forEach(mutation => {
        if (mutation.attributeName === 'class' && 
            mutation.target === document.documentElement) {
          updateActiveLinks();
        }
      });
    });
    
    observer.observe(document.documentElement, { attributes: true });
  });
</script>
