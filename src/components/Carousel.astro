---
export interface Props {
  images: string[];
}

const { images } = Astro.props;
---

<div class="rounded-lg relative w-full overflow-hidden" data-carousel="slide">
  <!-- Carousel wrapper -->
  <div
    class="relative flex transition-transform duration-700 ease-in-out"
    data-carousel-wrapper
  >
    {
      images.map((image, index) => (
        <div class="flex-shrink-0 w-full h-56 md:h-96" data-carousel-item>
          <img
            src={image}
            class="rounded-lg w-full h-full object-cover"
            alt={`Slide ${index + 1}`}
          />
        </div>
      ))
    }
  </div>
  <!-- Slider indicators -->
  <div
    class="absolute z-30 flex -translate-x-1/2 space-x-3 rtl:space-x-reverse bottom-5 left-1/2"
  >
    {
      images.map((_, index) => (
        <button
          type="button"
          class={`w-3 h-3 rounded-full ${index === 0 ? "bg-white" : "bg-gray-300"}`}
          aria-current={index === 0 ? "true" : "false"}
          aria-label={`Slide ${index + 1}`}
          data-carousel-slide-to={index}
        />
      ))
    }
  </div>
  <!-- Slider controls -->
  <button
    type="button"
    class="absolute top-0 start-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none"
    data-carousel-prev
  >
    <span
      class="inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/30 group-hover:bg-white/50 group-focus:ring-4 group-focus:ring-white group-focus:outline-none"
    >
      <svg
        class="mr-0.5 w-4 h-4 text-white rtl:rotate-180"
        aria-hidden="true"
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 6 10"
      >
        <path
          stroke="currentColor"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M5 1 1 5l4 4"></path>
      </svg>
      <span class="sr-only">Previous</span>
    </span>
  </button>
  <button
    type="button"
    class="absolute top-0 end-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none"
    data-carousel-next
  >
    <span
      class="inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/30 group-hover:bg-white/50 group-focus:ring-4 group-focus:ring-white group-focus:outline-none"
    >
      <svg
        class="ml-0.5 w-4 h-4 text-white rtl:rotate-180"
        aria-hidden="true"
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 6 10"
      >
        <path
          stroke="currentColor"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="m1 9 4-4-4-4"></path>
      </svg>
      <span class="sr-only">Next</span>
    </span>
  </button>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const carousels = document.querySelectorAll('[data-carousel="slide"]');
    carousels.forEach((carousel) => {
      const wrapper = carousel.querySelector(
        "[data-carousel-wrapper]"
      ) as HTMLElement | null;
      const items = carousel.querySelectorAll("[data-carousel-item]");
      const indicators = carousel.querySelectorAll("[data-carousel-slide-to]");
      const totalItems = items.length;
      let currentIndex = 0;

      const updateCarousel = (newIndex: number) => {
        if (wrapper) {
          const offset = -newIndex * 100;
          wrapper.style.transform = `translateX(${offset}%)`;
        }

        if (indicators.length > 0) {
          indicators[currentIndex]?.classList.remove("bg-white");
          indicators[currentIndex]?.classList.add("bg-gray-300");
          indicators[newIndex]?.classList.remove("bg-gray-300");
          indicators[newIndex]?.classList.add("bg-white");

          currentIndex = newIndex;
        }
      };

      const prevButton = carousel.querySelector(
        "[data-carousel-prev]"
      ) as HTMLElement | null;
      const nextButton = carousel.querySelector(
        "[data-carousel-next]"
      ) as HTMLElement | null;

      prevButton?.addEventListener("click", () => {
        const newIndex = (currentIndex - 1 + totalItems) % totalItems;
        updateCarousel(newIndex);
      });

      nextButton?.addEventListener("click", () => {
        const newIndex = (currentIndex + 1) % totalItems;
        updateCarousel(newIndex);
      });

      indicators.forEach((indicator, index) => {
        indicator.addEventListener("click", () => {
          updateCarousel(index);
        });
      });

      updateCarousel(0);
    });
  });
</script>
