---
import TranslateIcon from '@icons/Translate.astro';

const { lang } = Astro.props;

type Language = (typeof languages)[number];

const languages = ['es', 'en'] as const;

function updateLanguageUrl(
	currentLang: Language,
	targetLang: Language,
): string {
	if (currentLang === 'es' && targetLang === 'en') {
		return '/en';
	}
	if (currentLang === 'en' && targetLang === 'es') {
		return '/';
	}
	return currentLang === 'es' ? '/' : '/en';
}
---

<div class='relative ml-1 mr-1'>
	<button
		id='language-toggle-btn'
		class='appearance-none border-none flex hover:scale-125 transition'
	>
		<span class='sr-only'>Elige el idioma</span>
		<TranslateIcon class='language-toggle-icon size-4 transition-all' />
	</button>
	<div
		id='language-menu'
		class='absolute hidden scale-80 top-8 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white/90 dark:bg-gray-900/90 dark:border-gray-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md'
	>
		<ul>
			{
				languages.map(l => {
					const url = updateLanguageUrl(lang as Language, l);
					return (
						<li class='language-menu-option'>
							<a
								class='dark:border-gray-700 dark:hover:bg-gray-900 dark:hover:border-gray-500'
								href={url}
								class={l === lang ? 'active' : ''}
							>
								{l.toUpperCase()}
							</a>
						</li>
					);
				})
			}
		</ul>
	</div>

	<script is:inline>
		let remove = null;
		const matchMedia = window.matchMedia('(prefers-color-scheme: dark)');
		const languagesMenu = document.getElementById('language-menu');

		const getLanguagePreference = () => {
			if (typeof localStorage !== 'undefined') {
				return localStorage.getItem('language') ?? 'system';
			}

			return window.matchMedia('(prefers-color-scheme: dark)').matches
				? 'dark'
				: 'light';
		};

		const updateIcon = languagePreference => {
			document
				.querySelectorAll('.language-toggle-icon')
				.forEach(element => {
					element.style.scale =
						element.id === languagePreference ? '1' : '0';
				});
		};

		const updateLanguage = () => {
			if (remove != null) {
				remove();
			}
			matchMedia.addEventListener('change', updateLanguage);
			remove = () => {
				matchMedia.removeEventListener('change', updateLanguage);
			};

			const languagePreference = getLanguagePreference();
			const isDark =
				languagePreference === 'dark' ||
				(languagePreference === 'system' && matchMedia.matches);

			updateIcon(languagePreference);
			document.documentElement.classList[isDark ? 'add' : 'remove'](
				'dark',
			);
		};

		updateLanguage();

		document.addEventListener('click', () =>
			languagesMenu.classList.remove('open'),
		);

		document
			.getElementById('languages-toggle-btn')
			.addEventListener('click', e => {
				e.stopPropagation();
				const isClosed = !languagesMenu.classList.contains('open');
				languagesMenu.classList[isClosed ? 'add' : 'remove']('open');
			});

		document.querySelectorAll('.language-menu-option').forEach(element => {
			element.addEventListener('click', e => {
				localStorage.setItem(
					'language',
					e.target.innerText.toLowerCase().trim(),
				);
				updateLanguage();
			});
		});
	</script>

	<style>
		#language-menu.open {
			display: inline;
			animation: scale-up-center 0.15s
				cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
		}

		@keyframes scale-up-center {
			from {
				transform: scale(0.8);
				opacity: 0;
			}

			to {
				transform: scale(1);
				opacity: 1;
			}
		}
	</style>
</div>
