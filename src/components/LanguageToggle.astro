---
import TranslateIcon from '@icons/Translate.astro';
import { languages, getCurrentLanguage, getLanguageSwitchUrl } from '@i18n/config';
import { textsJson } from '@utils/const';
import type { Translations } from '../types/translations';

// Obtener el idioma actual
const currentLang = getCurrentLanguage(Astro.url);

// Obtener las traducciones del idioma actual
const translations = textsJson[currentLang] as Translations;
const languageNames = translations.languageNames || {};
---

<div class='relative ml-1 mr-1'>
	<button
		id='language-toggle-btn'
		class='appearance-none border-none flex hover:scale-125 transition items-center gap-1'
		aria-label='Cambiar idioma'
		type='button'
	>
		<span class='sr-only'>Elige el idioma</span>
		<span class='text-lg'>{languages[currentLang]?.flag || 'üåê'}</span>
		<TranslateIcon class='language-toggle-icon size-4 transition-all' />
	</button>
	<div
		id='language-menu'
		class='absolute hidden scale-80 top-8 right-0 text-sm p-2 min-w-[200px] max-h-[400px] overflow-y-auto rounded-md border border-gray-100 bg-white/90 dark:bg-gray-900/90 dark:border-gray-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md'
	>
		<ul class='grid grid-cols-1 gap-1'>
			{
				Object.entries(languages).map(([code, langInfo]) => {
					const url = getLanguageSwitchUrl(Astro.url, code);
					const isActive = code === currentLang;
					return (
						<li class='language-menu-option'>
							<a
								href={url}
								class={`block px-3 py-2 hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm transition-colors ${
									isActive ? 'bg-neutral-200/50 dark:bg-gray-600/50' : ''
								}`}
							>
								<span class='flex items-center gap-3'>
									<span class='text-xl'>{langInfo.flag}</span>
									<span class='flex-1'>{languageNames[code] || langInfo.nativeName}</span>
									{isActive && (
										<span class='text-yellow-600 dark:text-yellow-400'>‚úì</span>
									)}
								</span>
							</a>
						</li>
					);
				})
			}
		</ul>
	</div>
</div>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const languageMenu = document.getElementById('language-menu');
		const languageToggleBtn = document.getElementById('language-toggle-btn');
		
		if (!languageMenu || !languageToggleBtn) return;
		
		let isOpen = false;
		
		// Toggle menu when clicking button
		languageToggleBtn.addEventListener('click', (e) => {
			e.preventDefault();
			e.stopPropagation();
			
			isOpen = !isOpen;
			if (isOpen) {
				languageMenu.classList.remove('hidden');
				languageMenu.classList.add('open');
			} else {
				languageMenu.classList.add('hidden');
				languageMenu.classList.remove('open');
			}
		});
		
		// Close menu when clicking outside
		document.addEventListener('click', (e) => {
			const target = e.target as HTMLElement;
			if (!languageMenu.contains(target) && !languageToggleBtn.contains(target)) {
				isOpen = false;
				languageMenu.classList.add('hidden');
				languageMenu.classList.remove('open');
			}
		});
		
		// Prevent menu from closing when clicking inside
		languageMenu.addEventListener('click', (e) => {
			e.stopPropagation();
		});
	});
</script>

<style>
	#language-menu.open {
		display: block !important;
		animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
	}

	#language-menu.hidden {
		display: none !important;
	}

	@keyframes scale-up-center {
		from {
			transform: scale(0.8);
			opacity: 0;
		}
		to {
			transform: scale(1);
			opacity: 1;
		}
	}
	
	.language-menu-option a {
		text-decoration: none;
		color: inherit;
	}
	
	/* Scrollbar estilos */
	#language-menu::-webkit-scrollbar {
		width: 6px;
	}
	
	#language-menu::-webkit-scrollbar-track {
		background: transparent;
	}
	
	#language-menu::-webkit-scrollbar-thumb {
		background: #888;
		border-radius: 3px;
	}
	
	#language-menu::-webkit-scrollbar-thumb:hover {
		background: #555;
	}
</style>
