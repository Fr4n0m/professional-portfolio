---
import DesktopNav from '../header/DesktopNav.astro';
import MobileNav from '../header/MobileNav.astro';
import type { HeaderItem } from '../../types/headerItem';
import type { Translations } from '../../types/translations';

const translations: Translations = Astro.props.translations;
const headerItems: HeaderItem[] = translations.headerItems;
const lang = Astro.props.lang;

// Obtener información personal desde las traducciones
const info = {
  name: translations.personalInfo.name,
  role: translations.personalInfo.role,
  email: translations.personalInfo.mail,
  location: translations.personalInfo.location,
  specialties: 'React, Next.js, Node.js, Astro, TypeScript',
  additionalTech: 'Tailwind CSS, MongoDB, PostgreSQL, Git'
};
---

<header class='fixed top-0 z-50 flex items-center justify-center w-full mx-auto'>
  <DesktopNav headerItems={headerItems} info={info} lang={lang} />
  <MobileNav headerItems={headerItems} lang={lang} translations={translations} />
</header>

<script>
  // Navigation highlighting with improved logic for all pages and sections
  function initNavigation() {
    const navItems = document.querySelectorAll('header nav a');
    const currentPath = window.location.pathname;
    const currentHash = window.location.hash;
    
    if (navItems.length === 0) {
      console.warn('Navigation setup incomplete: nav items missing');
      return;
    }
    
    // Function to check if the current URL matches the nav item
    const isCurrentPage = (itemHref: string) => {
      // Handle home page special case
      if (itemHref === '/' || itemHref === '/#main') {
        return currentPath === '/' && (currentHash === '' || currentHash === '#main');
      }
      
      // Handle language-specific home pages
      if (itemHref.match(/^\/[a-z]{2}(-[a-z]{2})?\/?(#main)?$/)) {
        const pathWithoutHash = itemHref.split('#')[0];
        return currentPath === pathWithoutHash || currentPath === pathWithoutHash.slice(0, -1);
      }
      
      // Handle hash navigation on the same page
      if (itemHref.includes('#') && currentPath === itemHref.split('#')[0]) {
        return currentHash === '#' + itemHref.split('#')[1];
      }
      
      // Handle direct page matches (e.g., /certifications)
      const itemPath = itemHref.split('#')[0];
      return currentPath === itemPath || currentPath === itemPath + '/';
    };
    
    // Function to update navigation highlighting
    const updateNavHighlighting = () => {
      navItems.forEach(item => {
        const href = item.getAttribute('href');
        const dataSection = item.getAttribute('data-section');
        
        // Skip external links
        if (href && (href.startsWith('http') || href.startsWith('mailto:'))) {
          return;
        }
        
        let isActive = false;
        
        // Check if this is the current page
        if (href && isCurrentPage(href)) {
          isActive = true;
        }
        
        // Apply or remove active classes
        if (isActive) {
          item.classList.add('active');
        } else {
          item.classList.remove('active');
        }
      });
    };
    
    // Set initial active state
    updateNavHighlighting();
    
    // Handle sections on the current page
    const sections = document.querySelectorAll('section[data-section]');
    
    if (sections.length > 0) {
      const observerOptions = {
        root: null,
        rootMargin: '-20% 0px -60% 0px', // Ampliar el margen inferior para priorizar secciones superiores
        threshold: 0.1 // Requiere que al menos el 10% de la sección sea visible
      };
      
      const callback = (entries: IntersectionObserverEntry[]) => {
        // Filter for sections that are currently intersecting
        const visibleSections = entries.filter(entry => entry.isIntersecting);
        
        // If no sections are visible, don't update anything
        if (visibleSections.length === 0) return;
        
        // Get the section that's closest to the top of the viewport
        let activeSection;
        if (visibleSections.length > 1) {
          // When multiple sections are visible, choose the one with smallest Y - the topmost one
          activeSection = visibleSections.reduce((top, current) => {
            const topRect = top.target.getBoundingClientRect();
            const currentRect = current.target.getBoundingClientRect();
            return topRect.top < currentRect.top ? top : current;
          });
        } else {
          // If only one section is visible, that's our active section
          activeSection = visibleSections[0];
        }
        
        const activeSectionId = activeSection.target.id;
        
        // Update all navigation items
        navItems.forEach(item => {
          const dataSection = item.getAttribute('data-section');
          
          if (dataSection === activeSectionId) {
            item.classList.add('active');
          } else if (item.getAttribute('href')?.includes('#')) {
            // Only remove active class from hash navigation items, not from page navigation
            item.classList.remove('active');
          }
        });
      };
      
      const observer = new IntersectionObserver(callback, observerOptions);
      sections.forEach(section => observer.observe(section));
      
      // Marcamos el header para evitar inicializaciones duplicadas
      document.querySelector('header')?.setAttribute('data-has-observer', 'true');
      
      // Handle visibility changes to pause/resume observer
      document.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'hidden') {
          observer.disconnect();
        } else {
          sections.forEach(section => observer.observe(section));
        }
      });
      
      // Cleanup on page navigation
      window.addEventListener('beforeunload', () => {
        observer.disconnect();
      });
    }
    
    // Update highlighting when hash changes
    window.addEventListener('hashchange', updateNavHighlighting);
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      initNavigation();
      // Manejar la selección inicial de forma explícita
      handleInitialSectionSelection();
    });
  } else {
    initNavigation();
    // Manejar la selección inicial de forma explícita
    handleInitialSectionSelection();
  }
  
  // Esta función se encarga de seleccionar la primera sección como activa al cargar la página
  function handleInitialSectionSelection() {
    // Esperamos un momento para que se complete la renderización
    setTimeout(() => {
      const sections = document.querySelectorAll('section[data-section]');
      const navItems = document.querySelectorAll('header nav a');
      
      if (sections.length > 0 && navItems.length > 0) {
        // La sección inicial es la primera
        const initialSectionId = sections[0].id;
        
        // Quitamos todas las clases de activo
        navItems.forEach(item => {
          item.classList.remove('active');
        });
        
        // Activamos solo el elemento del menú correspondiente a la primera sección
        navItems.forEach(item => {
          const dataSection = item.getAttribute('data-section');
          if (dataSection === initialSectionId) {
            item.classList.add('active');
          }
        });
      }
    }, 100); // Pequeño retardo para asegurar que el DOM está listo
  }
</script>