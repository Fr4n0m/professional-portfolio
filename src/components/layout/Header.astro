---
import DesktopNav from '../header/DesktopNav.astro';
import MobileNav from '../header/MobileNav.astro';
import type { HeaderItem } from '../../types/headerItem';
import type { Translations } from '../../types/translations';

const translations: Translations = Astro.props.translations;
const headerItems: HeaderItem[] = translations.headerItems;
const lang = Astro.props.lang;

// Obtener informaci√≥n personal desde las traducciones
const info = {
  name: translations.personalInfo.name,
  role: translations.personalInfo.role,
  email: translations.personalInfo.mail,
  location: translations.personalInfo.location,
  specialties: 'React, Next.js, Node.js, Astro, TypeScript',
  additionalTech: 'Tailwind CSS, MongoDB, PostgreSQL, Git'
};
---

<header class='fixed top-0 z-10 flex items-center justify-center w-full mx-auto'>
  <DesktopNav headerItems={headerItems} info={info} lang={lang} />
  <MobileNav headerItems={headerItems} lang={lang} />
</header>

<script>
  // Navigation highlighting
  document.addEventListener('DOMContentLoaded', () => {
    const sections = document.querySelectorAll('section[data-section]');
    const navItems = document.querySelectorAll('header nav a');

    if (sections.length === 0) {
      console.error('No se encontraron secciones con ID en el DOM');
      return;
    }

    const callback = (entries: any[]) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          navItems.forEach(item => {
            if (item.getAttribute('aria-label') === entry.target.id) {
              item.classList.add('dark:text-yellow-300');
              item.classList.add('text-blue-800');
            } else {
              item.classList.remove('dark:text-yellow-300');
              item.classList.remove('text-blue-800');
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: '0px',
      threshold: 0.9,
    });

    sections.forEach(section => observer.observe(section));

    document.addEventListener('visibilitychange', () => {
      if (document.visibilityState === 'hidden') {
        observer.disconnect();
      } else {
        sections.forEach(section => observer.observe(section));
      }
    });
  });
</script>
