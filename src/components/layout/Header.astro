---
import ThemeToggle from '@components/ThemeToggle.astro';
import type { HeaderItem } from '../../types/headerItem';
import type { Translations } from '../../types/translations';
import LanguageToggle from '@components/LanguageToggle.astro';

const translations: Translations = Astro.props.translations;
const headerItems: HeaderItem[] = translations.headerItems;
const lang = Astro.props.lang;
---

<header class="fixed top-0 z-50 w-full bg-white/80 dark:bg-gray-800/90 backdrop-blur-md">
  <div class="container mx-auto px-4">
    <!-- Desktop Header -->
    <nav class="hidden md:flex items-center justify-between py-4">
      <!-- Logo -->
      <a href={lang === 'es' ? '/' : `/${lang}/`} class="flex items-center space-x-2">
        <img
          src="/assets/images/Fr4n0m Photo.webp"
          alt="Fr4n0m photo"
          class="w-8 h-8 rounded-full"
        />
        <span class="font-semibold text-lg dark:text-white">Fr4n0m</span>
      </a>

      <!-- Menu Items -->
      <div class="flex items-center space-x-1">
        {headerItems.map(item => (
          <a
            class="px-4 py-2 rounded-lg text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
            aria-label={item.label}
            href={item.url}
            target={item.title === 'CV' ? '_blank' : '_self'}
          >
            {item.title}
          </a>
        ))}
      </div>

      <!-- Theme & Language Toggle -->
      <div class="flex items-center space-x-3">
        <ThemeToggle />
        <LanguageToggle lang={lang} />
      </div>
    </nav>

    <!-- Mobile Header -->
    <nav class="md:hidden flex items-center justify-between py-3">
      <!-- Logo and Menu Button -->
      <div class="flex items-center space-x-3">
        <button
          id="mobile-menu-button"
          class="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
          aria-label="Toggle menu"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
        <a href={lang === 'es' ? '/' : `/${lang}/`} class="flex items-center space-x-2">
          <img
            src="/assets/images/Fr4n0m Photo.webp"
            alt="Fr4n0m photo"
            class="w-7 h-7 rounded-full"
          />
          <span class="font-semibold dark:text-white">Fr4n0m</span>
        </a>
      </div>

      <!-- Theme & Language Toggle -->
      <div class="flex items-center space-x-2">
        <ThemeToggle />
        <LanguageToggle lang={lang} />
      </div>
    </nav>

    <!-- Mobile Menu -->
    <div
      id="mobile-menu"
      class="hidden md:hidden absolute top-full left-0 right-0 bg-white dark:bg-gray-800 border-t dark:border-gray-700 shadow-lg"
    >
      <div class="py-2">
        {headerItems.map(item => (
          <a
            class="block px-4 py-3 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
            aria-label={item.label}
            href={item.url}
            target={item.title === 'CV' ? '_blank' : '_self'}
          >
            {item.title}
          </a>
        ))}
      </div>
    </div>
  </div>
</header>

<script>
  function initMobileMenu() {
    const menuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (!menuButton || !mobileMenu) return;

    let isOpen = false;

    menuButton.addEventListener('click', () => {
      isOpen = !isOpen;
      if (isOpen) {
        mobileMenu.classList.remove('hidden');
        // Change hamburger to X
        menuButton.innerHTML = `
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        `;
      } else {
        mobileMenu.classList.add('hidden');
        // Change X back to hamburger
        menuButton.innerHTML = `
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        `;
      }
    });

    // Close menu when clicking outside
    document.addEventListener('click', (event) => {
      if (!menuButton.contains(event.target as Node) && !mobileMenu.contains(event.target as Node)) {
        if (isOpen) {
          isOpen = false;
          mobileMenu.classList.add('hidden');
          menuButton.innerHTML = `
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
          `;
        }
      }
    });

    // Close menu when a link is clicked
    const menuLinks = mobileMenu.querySelectorAll('a');
    menuLinks.forEach(link => {
      link.addEventListener('click', () => {
        isOpen = false;
        mobileMenu.classList.add('hidden');
        menuButton.innerHTML = `
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        `;
      });
    });
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', initMobileMenu);
  // Initialize when page is navigated (for Astro page transitions)
  document.addEventListener('astro:after-swap', initMobileMenu);
</script>

<style>
  /* Ensure header is above other content */
  header {
    z-index: 50;
  }

  /* Add padding to body to account for fixed header */
  :global(body) {
    padding-top: 4rem;
  }

  @media (max-width: 768px) {
    :global(body) {
      padding-top: 3.5rem;
    }
  }

  /* Smooth transitions */
  #mobile-menu {
    transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out;
  }

  #mobile-menu.hidden {
    transform: translateY(-10px);
    opacity: 0;
  }
</style>
