---
// LegalModal.astro - Modal reutilizable para políticas legales con estilo Apple/macOS
interface Props {
  id: string;
  title: string;
  lastUpdate?: string;
}

const { id, title, lastUpdate } = Astro.props;
---

<div id={id} class="fixed inset-0 z-50 hidden items-center justify-center p-4 bg-black/30 backdrop-blur-sm">
  <!-- Overlay para cerrar al hacer clic fuera del modal -->
  <div class="absolute inset-0 cursor-pointer close-modal"></div>
  
  <!-- Contenido del modal -->
  <div 
    class="relative bg-white/95 dark:bg-gray-900/95 rounded-2xl overflow-hidden shadow-2xl border border-gray-200/20 dark:border-gray-700/20 backdrop-blur-xl w-full max-w-4xl max-h-[90vh] flex flex-col cursor-default"
    onClick={(e) => e.stopPropagation()} 
  >
    <!-- Botón de cierre -->
    <button 
      class="absolute right-4 top-4 z-10 bg-gray-100/60 dark:bg-gray-800/60 backdrop-blur-sm rounded-full p-2 shadow-md hover:bg-gray-200 dark:hover:bg-gray-700 transition-all close-modal"
      aria-label="Cerrar modal"
    >
      <svg class="w-5 h-5 text-gray-700 dark:text-gray-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
    
    <!-- Encabezado del modal -->
    <div class="p-6 border-b border-gray-200/40 dark:border-gray-700/40">
      <h2 class="text-2xl font-semibold text-gray-900 dark:text-white">{title}</h2>
      {lastUpdate && 
        <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">
          Última actualización: {lastUpdate}
        </p>
      }
    </div>
    
    <!-- Contenido del modal con scroll -->
    <div class="p-6 overflow-y-auto flex-grow">
      <slot />
    </div>
    
    <!-- Pie del modal con botones (opcional) -->
    <div class="p-4 border-t border-gray-200/40 dark:border-gray-700/40 flex justify-end">
      <button class="px-4 py-2.5 rounded-xl bg-blue-600 hover:bg-blue-700 text-white transition-colors text-sm font-medium close-modal">
        Aceptar
      </button>
    </div>
  </div>
</div>

<script>
  // Importamos GSAP para animaciones estilo Apple
  import { gsap } from 'gsap';
  
  // Gestionar la apertura y cierre del modal
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById(modalId);
    if (!modal) return;
    
    // Función para abrir el modal
    window.openModal = function(id) {
      const targetModal = document.getElementById(id);
      if (targetModal) {
        // Mostrar el modal
        targetModal.classList.remove('hidden');
        targetModal.classList.add('flex');
        document.body.style.overflow = 'hidden'; // Evitar scroll en background
        
        // Animar la apertura con estilo Apple
        const modalContent = targetModal.querySelector('div:not(.close-modal)');
        if (modalContent) {
          gsap.fromTo(modalContent, 
            { opacity: 0, scale: 0.9, y: 20 },
            { 
              opacity: 1, 
              scale: 1, 
              y: 0, 
              duration: 0.4, 
              ease: 'back.out(1.7)' 
            }
          );
        }
      }
    };
    
    // Función para cerrar el modal
    window.closeModal = function(id) {
      const targetModal = document.getElementById(id);
      if (targetModal) {
        // Animar el cierre
        const modalContent = targetModal.querySelector('div:not(.close-modal)');
        if (modalContent) {
          gsap.to(modalContent, {
            opacity: 0,
            scale: 0.9,
            y: 10,
            duration: 0.3,
            ease: 'power3.in',
            onComplete: () => {
              targetModal.classList.add('hidden');
              targetModal.classList.remove('flex');
              document.body.style.overflow = 'auto'; // Restaurar scroll en background
            }
          });
        } else {
          targetModal.classList.add('hidden');
          targetModal.classList.remove('flex');
          document.body.style.overflow = 'auto';
        }
      }
    };
    
    // Eventos para cerrar el modal
    modal.querySelectorAll('.close-modal').forEach(element => {
      element.addEventListener('click', () => {
        window.closeModal(modalId);
      });
    });
    
    // Cerrar con tecla Escape
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
        window.closeModal(modalId);
      }
    });
  });
</script>

<style>
  /* Personalizar la barra de desplazamiento para que coincida con el estilo macOS */
  .overflow-y-auto::-webkit-scrollbar {
    width: 8px;
  }
  
  .overflow-y-auto::-webkit-scrollbar-track {
    background: transparent;
  }
  
  .overflow-y-auto::-webkit-scrollbar-thumb {
    background: rgba(156, 163, 175, 0.5);
    border-radius: 4px;
  }
  
  .dark .overflow-y-auto::-webkit-scrollbar-thumb {
    background: rgba(75, 85, 99, 0.5);
  }
  
  .overflow-y-auto::-webkit-scrollbar-thumb:hover {
    background: rgba(156, 163, 175, 0.7);
  }
  
  .dark .overflow-y-auto::-webkit-scrollbar-thumb:hover {
    background: rgba(75, 85, 99, 0.7);
  }
</style>
